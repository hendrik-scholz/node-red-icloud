[
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = true;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (undefined !== msg.ldm &&\n    undefined !== msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 180,
        "wires": []
    },
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = true;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (undefined !== msg.ldm &&\n    undefined !== msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 180,
        "wires": []
    },
    {
        "id": "fd4d19b8.ff0d28",
        "type": "subflow",
        "name": "error handling",
        "info": "",
        "in": [
            {
                "x": 45,
                "y": 169,
                "wires": [
                    {
                        "id": "595e324b.072574"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 723,
                "y": 169,
                "wires": [
                    {
                        "id": "28ac27ed.ecfe18",
                        "port": 0
                    },
                    {
                        "id": "595e324b.072574",
                        "port": 1
                    }
                ]
            },
            {
                "x": 723,
                "y": 226,
                "wires": [
                    {
                        "id": "595e324b.072574",
                        "port": 2
                    }
                ]
            }
        ]
    },
    {
        "id": "595e324b.072574",
        "type": "function",
        "z": "fd4d19b8.ff0d28",
        "name": "check",
        "func": "/* error codes */\nvar errorCodes = {\n    '{\"error\":7}' : {'title': 'Invalid credentials', 'detail': 'Invalid Apple ID'},\n    '{\"error\":1}' : {'title': 'Invalid credentials',  'detail': 'Invalid password'},\n    'Error: getaddrinfo EAI_AGAIN setup.icloud.com:443 : https://setup.icloud.com/setup/ws/1/login': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'}\n};\n\nfunction isJSON(jsonString) {\n    try {\n        JSON.parse(jsonString);\n    } catch(e) {\n        return false;\n    }\n    \n    return true;\n}\n\n/* function to create error messages */\nfunction createErrorMessage(status, source, detail) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = status;\n    \n    var error = {\n        \"status\": status,\n        \"source\": { \"pointer\": source },\n        \"title\": errorCodes[detail] ? errorCodes[detail].title : '',\n        \"detail\": errorCodes[detail] ? errorCodes[detail].detail : detail\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check HTTP response code */\nif (msg.statusCode === 200) {\n    /* recreate message from input */\n    var responseOk = {};\n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    responseOk.headers = msg.headers;\n    responseOk.payload = msg.payload;\n    responseOk.ldm = msg.ldm;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== '') {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        responseOk.ldm = msg.ldm;\n        \n        return[null, responseOk, null];\n    }\n} else {\n    var errorResponse = {};\n    var statusCode = msg.statusCode;\n    var payload = isJSON(msg.payload) ? JSON.parse(msg.payload) : '';\n\n    /* in case no HTTP response code is given */    \n    if (isNaN(statusCode)) {\n        statusCode = 500;\n    }\n\n    /* check whether there is an error object */\n    if(undefined !== payload.errors) {\n        /* \n         * In case there is an error already, use this error object\n         * to return the root cause of the problem.\n         */\n        errorResponse.req = msg.req;\n        errorResponse.res = msg.res;\n        errorResponse.payload = payload;\n        errorResponse.statusCode = statusCode;\n    } else {\n        errorResponse = createErrorMessage(statusCode, msg.responseUrl, msg.payload);\n    }\n\n    return[null, null, errorResponse];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 171,
        "y": 168,
        "wires": [
            [
                "28ac27ed.ecfe18"
            ],
            [
                "3b615dca.4c3432"
            ],
            []
        ]
    },
    {
        "id": "3b615dca.4c3432",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "logging",
        "x": 516,
        "y": 141.5,
        "wires": [
            []
        ]
    },
    {
        "id": "28ac27ed.ecfe18",
        "type": "json",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "3b615dca.4c3432"
            ]
        ]
    },
    {
        "id": "15674b79.b9ce45",
        "type": "tab",
        "label": "get reminder lists"
    },
    {
        "id": "4aed6dd8.c5dc54",
        "type": "http in",
        "z": "15674b79.b9ce45",
        "name": "get reminder lists",
        "url": "/reminderlists",
        "method": "get",
        "swaggerDoc": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "a38e6ee1.0be49"
            ]
        ]
    },
    {
        "id": "a38e6ee1.0be49",
        "type": "function",
        "z": "15674b79.b9ce45",
        "name": "save input to LDM",
        "func": "var output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.payload = msg.payload;\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/reminderlists\" },\n        \"title\": 'Error while saving input to LDM',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check input */\nif ((undefined === msg.payload.appleId || msg.payload.appleId.length === 0) ||\n    (undefined === msg.payload.password || msg.payload.password.length === 0)) {\n    /* appleId or password undefined or empty */\n    return [null, createErrorMessage('One or more elements are missing ' + \n                        '(appleId, password).')];\n}\n\n/* save input to LDM */\noutput.ldm = {\n    \"process\": {\n        \"trace\": [{\n            \"step\": \"save input to LDM\",\n            \"timestamp\": new Date().getTime()\n        }],\n        \"durationInMs\": null\n    },\n    \"header\" : {\n        \"origin\": \"https://www.icloud.com\",\n        \"userAgent\": \"node-red-icloud/1.2.0 (Node-RED)\",\n        \"appleId\": msg.req.query.appleId,\n        \"password\": msg.req.query.password,\n        \"list\": null,\n        \"sessionCookie\": null,\n        \"remindersurl\": null,\n        \"languageCode\": null,\n        \"dsid\": null,\n    \t\"usertz\": null\n    },\n    \"tasklist\": []\n};\n\nreturn [output, null];",
        "outputs": "2",
        "noerr": 0,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "1af24e66.984542"
            ],
            [
                "bcc50372.53467"
            ]
        ]
    },
    {
        "id": "592a20f.3405b6",
        "type": "function",
        "z": "15674b79.b9ce45",
        "name": "prepare response",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"prepare response\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nif (undefined === msg.ldm.process.errors) {\n    response.payload = {};\n    response.payload.taskslists = msg.ldm.tasklist;\n} else {\n    response.payload = msg.ldm.process.errors;\n}\n\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nresponse.headers = {\n    \"Access-Control-Allow-Origin\": '*'\n};\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "b7bdff23.224468"
            ]
        ]
    },
    {
        "id": "49842851.80fe9",
        "type": "comment",
        "z": "15674b79.b9ce45",
        "name": "version 1.1",
        "info": "version 1.0: initial version\nversion 1.1: added check for appleId and password in 'save input to LDM'\n             added logging and exception handling",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "603c6bce.f473fc",
        "type": "http response",
        "z": "15674b79.b9ce45",
        "name": "get reminder lists response",
        "x": 720,
        "y": 700,
        "wires": []
    },
    {
        "id": "ff2a0d2.faa0df",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "15674b79.b9ce45",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "2ec4baf4.a394c6"
            ],
            [
                "603c6bce.f473fc"
            ]
        ]
    },
    {
        "id": "1af24e66.984542",
        "type": "subflow:747253ec.210a54",
        "z": "15674b79.b9ce45",
        "name": "",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "e7171324.f5f548"
            ]
        ]
    },
    {
        "id": "b7bdff23.224468",
        "type": "subflow:747253ec.210a54",
        "z": "15674b79.b9ce45",
        "x": 400,
        "y": 540,
        "wires": [
            [
                "603c6bce.f473fc"
            ]
        ]
    },
    {
        "id": "e7171324.f5f548",
        "type": "http request",
        "z": "15674b79.b9ce45",
        "name": "call session cache",
        "method": "POST",
        "ret": "txt",
        "url": "http://127.0.0.1:1880/icloud/login",
        "tls": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "ff2a0d2.faa0df"
            ]
        ]
    },
    {
        "id": "2ec4baf4.a394c6",
        "type": "function",
        "z": "15674b79.b9ce45",
        "name": "save response to LDM",
        "func": "/* recreate message from input */\nvar output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.ldm = {\n    \"process\": msg.ldm.process,\n    \"header\": msg.payload.header,\n    \"tasklist\": msg.payload.tasklist\n};\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"save response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\noutput.ldm.process.trace.push(trace);\n\nreturn output;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "9db5b1a9.0267a8"
            ]
        ]
    },
    {
        "id": "9db5b1a9.0267a8",
        "type": "subflow:747253ec.210a54",
        "z": "15674b79.b9ce45",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "592a20f.3405b6"
            ]
        ]
    },
    {
        "id": "57e885a7.8f8c0c",
        "type": "catch",
        "z": "15674b79.b9ce45",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 620,
        "wires": [
            [
                "a7cd76e5.d8681"
            ]
        ]
    },
    {
        "id": "a7cd76e5.d8681",
        "type": "function",
        "z": "15674b79.b9ce45",
        "name": "set exception",
        "func": "var response = {};\nresponse.req = null; //???\nresponse.res = null; //???\nresponse.ldm = null; //???\nresponse.payload = {};\nresponse.payload.errors = [];\n\nvar error = {\n    \"status\": 500,\n    \"source\": \"set exception\",\n    \"title\": msg.error.message,\n    \"detail\": msg.error.message\n};\n\nresponse.payload.errors.push(error);\n\nresponse.statusCode = 500;\n\n//node.error(msg.error.source.name);\n//node.error(msg.error.message);\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 700,
        "wires": [
            [
                "3abd2ed3.493ee2"
            ]
        ]
    },
    {
        "id": "3abd2ed3.493ee2",
        "type": "subflow:747253ec.210a54",
        "z": "15674b79.b9ce45",
        "x": 400,
        "y": 700,
        "wires": [
            [
                "603c6bce.f473fc"
            ]
        ]
    },
    {
        "id": "bcc50372.53467",
        "type": "subflow:747253ec.210a54",
        "z": "15674b79.b9ce45",
        "x": 400,
        "y": 227,
        "wires": [
            [
                "603c6bce.f473fc"
            ]
        ]
    }
]