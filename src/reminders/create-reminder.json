[{"id":"408e1bb9.692b84","type":"subflow","name":"logging","info":"","in":[{"x":60,"y":100,"wires":[{"id":"71bbf45d.ad2824"}]}],"out":[{"x":608,"y":102,"wires":[{"id":"408e1bb9.692b84","port":0}]}]},{"id":"729be803.e9f378","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"719e212e.fa755","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"371b3162.d84a7e","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"bf2bf1e.1e10d9","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"4c0875f3.dfd01c","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"e7d58cc.e8739f","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"4c3e8f95.7e5ff","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"88672963.3c3b28","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"47298f1f.7dbcf8","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"27a31f8d.0b2588","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"71bbf45d.ad2824","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"d5cf71a0.812128","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"5de36968.2088f","type":"subflow","name":"error handling","info":"","in":[{"x":45,"y":169,"wires":[{"id":"f2ab0ae6.84f5d8"}]}],"out":[{"x":723,"y":169,"wires":[{"id":"eed0eca4.45aeb","port":0},{"id":"f2ab0ae6.84f5d8","port":1}]},{"x":723,"y":226,"wires":[{"id":"f2ab0ae6.84f5d8","port":2}]}]},{"id":"f2ab0ae6.84f5d8","type":"function","z":"5de36968.2088f","name":"check","func":"/* check HTTP response code */\nif (msg.statusCode === 200) {\n    var responseOk = msg;\n    \n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== \"\") {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        \n        return[null, responseOk, null];\n    }\n} else {\n    var responseError = {\n        \"statusCode\":msg.statusCode\n    };\n\n    /* in case no HTTP response code is given */    \n    if (isNaN(msg.statusCode)) {\n        responseError.statusCode = 500;\n    }\n    \n    responseError.payload = {\n        \"function\":global.get(\"function\"),\n        \"message\":msg.payload\n    };\n\n    responseError.req = msg.req;\n    responseError.res = msg.res;\n    \n    /* clean up global variables */\n    global.set(\"lock\", false);\n    \n    return[null, null, responseError];\n}","outputs":"3","noerr":0,"x":171,"y":168,"wires":[["eed0eca4.45aeb"],["849ab4d5.a5de88"],[]]},{"id":"849ab4d5.a5de88","type":"subflow:408e1bb9.692b84","z":"5de36968.2088f","name":"logging","x":516,"y":141.5,"wires":[[]]},{"id":"eed0eca4.45aeb","type":"json","z":"5de36968.2088f","name":"","x":340,"y":66,"wires":[["849ab4d5.a5de88"]]},{"id":"408e1bb9.692b84","type":"subflow","name":"logging","info":"","in":[{"x":60,"y":100,"wires":[{"id":"71bbf45d.ad2824"}]}],"out":[{"x":608,"y":102,"wires":[{"id":"408e1bb9.692b84","port":0}]}]},{"id":"729be803.e9f378","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"719e212e.fa755","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"371b3162.d84a7e","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"bf2bf1e.1e10d9","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"4c0875f3.dfd01c","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"e7d58cc.e8739f","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"4c3e8f95.7e5ff","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"88672963.3c3b28","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"47298f1f.7dbcf8","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"27a31f8d.0b2588","type":"file","z":"408e1bb9.692b84","name":"write log entry","filename":"","appendNewline":true,"createDir":false,"overwriteFile":"false","x":462,"y":208,"wires":[]},{"id":"71bbf45d.ad2824","type":"function","z":"408e1bb9.692b84","name":"prepare log entry","func":"/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];","outputs":"2","noerr":0,"x":232,"y":173,"wires":[["d5cf71a0.812128"],["27a31f8d.0b2588"]]},{"id":"d5cf71a0.812128","type":"file","z":"408e1bb9.692b84","name":"log timestamp","filename":"","appendNewline":false,"createDir":false,"overwriteFile":"false","x":460,"y":144,"wires":[]},{"id":"7e0c8a86.1aea8c","type":"http in","z":"3576b4a7.59202c","name":"reminder request","url":"/reminders","method":"post","swaggerDoc":"","x":186,"y":315,"wires":[["f2e9204.f1e0ee"]]},{"id":"c099d2f9.3703c8","type":"function","z":"3576b4a7.59202c","name":"prepare login request","func":"global.set(\"function\", \"login\");\n\nvar loginMsg = {};\n\n/* HTTP header */\nloginMsg.headers = {\n    \"origin\":\"https://www.icloud.com\"\n};\n\n/* payload */\nloginMsg.payload = {\n    \"apple_id\":flow.get(\"appleId\"),\n    \"password\":flow.get(\"password\"),\n    \"extended_login\":false\n};\n\nloginMsg.req = msg.req;\nloginMsg.res = msg.res;\n\nreturn loginMsg;","outputs":1,"noerr":0,"x":206,"y":915,"wires":[["4bb1e55.7ff5e9c"]]},{"id":"565f9d1c.a78094","type":"http request","z":"3576b4a7.59202c","name":"iCloud login","method":"POST","ret":"txt","url":"https://setup.icloud.com/setup/ws/1/login","x":175,"y":977,"wires":[["a4182d29.8ae1d8"]]},{"id":"fbed162f.183348","type":"function","z":"3576b4a7.59202c","name":"prepare reminder request","func":"global.set(\"function\", \"create\");\n\n/* function to generate guid */\nfunction generateGuid() {\n    var guid = \"\";\n\n    for (var i = 0; i < 32; i++) {\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            guid += \"-\"\n        }\n\n        guid += Math.floor(Math.random()*0xF).toString(0xF);\n    }\n\n    return guid;\n}\n\n/* function to format a date */\nfunction formatDate (dateString) {\n    var dateArray = [\n        parseInt(dateString.substring(0, 10).replace(/-/g, \"\")),\n        parseInt(dateString.substring(0, 4)),\n        parseInt(dateString.substring(5, 7)),\n        parseInt(dateString.substring(8, 10)),\n        parseInt(dateString.substring(11, 13)),\n        parseInt(dateString.substring(14, 16)),\n        0];\n    \n    return dateArray;\n}\n\n/* gets guid of list by given name */\nvar lists = msg.payload.Collections;\nvar list = {};\nvar k;\nfor (k in lists) {\n    list = lists[k];\n\n    if (list.title === flow.get(\"reminderList\")) {\n        break;\n    }\n    \n    /* If the list the reminder should be put on to does not\n       exist, the reminder is put on one of the existing lists. */\n}\n\n/* create URL */\nvar url = flow.get(\"remindersurl\") +\n        \"/rd/reminders/\" +\n        list.guid +\n        \"?\" +\n        \"usertz=\"+ flow.get(\"usertz\") +\n        \"&lang=\" + flow.get(\"languageCode\") +\n        \"&dsid=\" + flow.get(\"dsid\");\n\n/* set URL */\nvar reminderRequest = {\"url\":url};\n\n/* HTTP header */\nreminderRequest.headers = {\n    \"origin\":\"https://www.icloud.com\",\n    \"cookie\":flow.get(\"sessionCookie\")\n};\n\n/* payload */\nreminderRequest.payload = {\"Reminders\": {\n   \"guid\": generateGuid(),\n   \"pGuid\": list.guid,\n   \"etag\": \"C=42@U=\" + generateGuid(),\n   \"createdDateExtended\": 475847804,\n   \"completedDate\": null,\n   \"order\": 475847804,\n   \"title\": flow.get(\"title\"),\n   \"description\": flow.get(\"description\"),\n   \"dueDate\": null,\n   \"dueDateIsAllDay\": false,\n   \"startDate\": null,\n   \"startDateIsAllDay\": true,\n   \"startDateTz\": null,\n   \"recurrence\": null,\n   \"alarms\": [{\n      \"messageType\":\"message\",\n      \"onDate\": null,\n\t  \"measurement\": null,\n      \"description\": \"Reminder\",\n      \"guid\": generateGuid(),\n      \"isLocationBased\": true,\n      \"proximity\": flow.get(\"proximity\"),\n      \"structuredLocation\": null\n   }]\n}};\n\n/* map priority values */\nif (flow.get(\"priority\") == \"1\") {\n    reminderRequest.payload.Reminders.priority = 1;\n} else if (flow.get(\"priority\") == \"2\") {\n    reminderRequest.payload.Reminders.priority = 5;\n} else if (flow.get(\"priority\") == \"3\") {\n    reminderRequest.payload.Reminders.priority = 9;\n}\n\n/* if an alarm is set */\nif (undefined !== flow.get(\"alarm\")) {\n    reminderRequest.payload.Reminders.dueDate = formatDate(flow.get(\"alarm\"));\n    reminderRequest.payload.Reminders.startDate = formatDate(flow.get(\"alarm\"));\n    reminderRequest.payload.Reminders.startDateIsAllDay = false;\n    reminderRequest.payload.Reminders.startDateTz = flow.get(\"usertz\");\n\n    reminderRequest.payload.Reminders.alarms[0].onDate = \n        formatDate(flow.get(\"alarm\"));\n}\n\n/* map location only if latitude and longitude is given */\nif (undefined !== flow.get(\"latitude\") &&\n    undefined !== flow.get(\"longitude\")) {\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation = {};\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        address = flow.get(\"address\");\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        latitude = flow.get(\"latitude\");\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        longitude = flow.get(\"longitude\");\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        locationName = flow.get(\"locationName\");\n}\n\nreminderRequest.req = msg.req;\nreminderRequest.res = msg.res;\n\nreturn reminderRequest;","outputs":1,"noerr":0,"x":216,"y":1555,"wires":[["4793cb00.29fbe4"]]},{"id":"1991f347.2d03cd","type":"http request","z":"3576b4a7.59202c","name":"iCloud create reminder","method":"POST","ret":"txt","url":"","x":216,"y":1615,"wires":[["b4d3c51b.674c3"]]},{"id":"e9351a68.dc5eb","type":"function","z":"3576b4a7.59202c","name":"prepare logout request","func":"global.set(\"function\", \"logout\");\n\nvar logoutRequest = {};\nlogoutRequest.payload = {};\n\n/* HTTP header */\nlogoutRequest.headers = {\n    \"Origin\":\"https://www.icloud.com\",\n    \"cookie\":flow.get(\"sessionCookie\")\n};\n\nlogoutRequest.req = msg.req;\nlogoutRequest.res = msg.res;\n\nreturn logoutRequest;","outputs":1,"noerr":0,"x":216,"y":1835,"wires":[["5579c1ad.6372a"]]},{"id":"eac81ae7.b8ce1","type":"http request","z":"3576b4a7.59202c","name":"iCloud logout","method":"POST","ret":"txt","url":"https://setup.icloud.com/setup/ws/1/logout","x":186,"y":1895,"wires":[["cf9f9afc.be77e8"]]},{"id":"88a080e0.a1f398","type":"http response","z":"3576b4a7.59202c","name":"reminder response","x":816,"y":2095,"wires":[]},{"id":"fbf280aa.37d2b","type":"function","z":"3576b4a7.59202c","name":"prepare reminder response","func":"global.set(\"function\", \"reminder response\");\n\nvar response = {};\n\nif (undefined === flow.get(\"exception\")) {\n    response.payload = {\"success\":true};\n} else {\n    /* If the flow made it to this point,\n       a reminder was created. Just create\n       a warning. */\n    response.payload = {\n        \"success\":false,\n        \"function\":flow.get(\"exceptionsource\"),\n        \"message\":flow.get(\"exception\")\n    };\n}\n\nresponse.req = msg.req;\nresponse.res = msg.res;\n\nglobal.set(\"lock\", false);\n\nreturn response;","outputs":1,"noerr":0,"x":226,"y":2095,"wires":[["46697d78.af56fc"]]},{"id":"53ce4ba5.993764","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":155,"y":717,"wires":[["c099d2f9.3703c8"]]},{"id":"4bb1e55.7ff5e9c","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":495,"y":917,"wires":[["565f9d1c.a78094"]]},{"id":"4793cb00.29fbe4","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":496,"y":1555,"wires":[["1991f347.2d03cd"]]},{"id":"5579c1ad.6372a","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":496,"y":1835,"wires":[["eac81ae7.b8ce1"]]},{"id":"46697d78.af56fc","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":496,"y":2095,"wires":[["88a080e0.a1f398"]]},{"id":"a4182d29.8ae1d8","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":515,"y":977,"wires":[["51754f6d.94792"],["88a080e0.a1f398"]]},{"id":"b4d3c51b.674c3","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":516,"y":1615,"wires":[["e9351a68.dc5eb"],["88a080e0.a1f398"]]},{"id":"cf9f9afc.be77e8","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":516,"y":1894,"wires":[["fbf280aa.37d2b"],["88a080e0.a1f398"]]},{"id":"f70698c3.fdbf08","type":"function","z":"3576b4a7.59202c","name":"save input to context","func":"global.set(\"function\", \"reminder request\");\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var error = {};\n    error.statusCode = 400;\n    error.payload = message;\n    \n    error.req = msg.req;\n    error.res = msg.res;\n    \n    return error;\n}\n\n/* check input */\nif (undefined === msg.payload.reminderList) {\n    /* reminderList missing */\n    return [null, null, createErrorMessage(\"The element reminderList is missing.\")];\n} else if (undefined === msg.payload.title) {\n    /* title missing */\n    return [null, null, createErrorMessage(\"The element title is missing.\")];\n} else if ((undefined === msg.payload.latitude &&\n            undefined === msg.payload.longitude) &&\n           undefined === msg.payload.alarm) {\n    /* alarm missing - mandatory if no geoposition is given */\n    return [null, null, createErrorMessage(\"One or more elements are missing \" + \n                        \"(latitude, longitude, alarm).\")];\n} else if ((undefined !== msg.payload.latitude &&\n            undefined !== msg.payload.longitude) &&\n           undefined === msg.payload.proximity) {\n    /* proximity missing - mandatory if a geoposition is given */\n    return [null, null, createErrorMessage(\"The element proximity is missing.\")];\n} else if (undefined === msg.payload.latitude &&\n           undefined !== msg.payload.longitude) {\n    /* latitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage(\"The element latitude is missing.\")];\n} else if (undefined !== msg.payload.latitude &&\n           undefined === msg.payload.longitude) {\n    /* longitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage(\"The element longitude is missing.\")];\n}\n\n/* save input to context */\nflow.set(\"appleId\", msg.payload.appleId);\nflow.set(\"password\", msg.payload.password);\nflow.set(\"reminderList\", msg.payload.reminderList);\nflow.set(\"priority\", msg.payload.priority);\nflow.set(\"title\", msg.payload.title);\nflow.set(\"description\", msg.payload.description);\nflow.set(\"proximity\", msg.payload.proximity);\nflow.set(\"address\", msg.payload.address);\nflow.set(\"locationName\", msg.payload.locationName);\nflow.set(\"latitude\", msg.payload.latitude);\nflow.set(\"longitude\", msg.payload.longitude);\nflow.set(\"alarm\", msg.payload.alarm);\n\nmsg.req = msg.req;\nmsg.res = msg.res;\n\n/* If a geoposition is given but the address is missing, call Nominatim\n   to determine the address */\nif (undefined !== flow.get(\"latitude\") &&\n    undefined !== flow.get(\"longitude\") &&\n    undefined === flow.get(\"address\")) {\n    global.set(\"function\", \"Nominatim request\");    \n        \n    var request = {};\n    request.url = \n        \"http://nominatim.openstreetmap.org/reverse?format=json\" +\n        \"&lat=\" + flow.get(\"latitude\") +\n        \"&lon=\" + flow.get(\"longitude\");\n\n    request.headers = {\n        \"User-Agent\":\"node-red-icloud/1.2.0 (Node-RED)\"\n    }\n\n    request.req = msg.req;\n    request.res = msg.res;\n    \n    return [null, request, null];\n} else {\n    return [msg, null, null];\n}","outputs":"3","noerr":0,"x":206,"y":375,"wires":[["53ce4ba5.993764"],["1d32c756.0c6df9"],["3fc0f6ee.5731a2"]]},{"id":"2abd647d.db45ec","type":"function","z":"3576b4a7.59202c","name":"prepare startup request","func":"global.set(\"function\", \"startup\");\n\n/* get all cookies from the login response */\nvar cookies = msg.headers[\"set-cookie\"];\nvar sessionCookie = \"\";\nvar k;\n\nfor (k in cookies) {\n    sessionCookie += cookies[k].substring(0, cookies[k].indexOf(\";\") + 1);\n}\n\nsessionCookie = sessionCookie.substring(0, sessionCookie.lastIndexOf(\";\"));\n/* get all cookies from login response - end */\n\n/* store property values of the login response */\nflow.set(\"remindersurl\", msg.payload.webservices.reminders.url);\nflow.set(\"languageCode\", msg.payload.dsInfo.languageCode);\nflow.set(\"dsid\", msg.payload.dsInfo.dsid);\nflow.set(\"sessionCookie\", sessionCookie);\n\n/* create URL */\nvar url = flow.get(\"remindersurl\") +\n        \"/rd/startup\" +\n        \"?\" +\n        \"usertz=\" + flow.get(\"usertz\") +\n        \"&lang=\" + flow.get(\"languageCode\") +\n        \"&dsid=\" + flow.get(\"dsid\");\n\n/* set URL */\nvar startupRequest = {\"url\":url};\n\n/* HTTP header */\nstartupRequest.headers = {\n    \"origin\":\"https://www.icloud.com\",\n    \"cookie\":flow.get(\"sessionCookie\")\n};\n\nstartupRequest.req = msg.req;\nstartupRequest.res = msg.res;\n\nreturn startupRequest;","outputs":1,"noerr":0,"x":216,"y":1295,"wires":[["8951913a.3c04e8"]]},{"id":"8951913a.3c04e8","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":496,"y":1295,"wires":[["6e24d0fd.b58778"]]},{"id":"6e24d0fd.b58778","type":"http request","z":"3576b4a7.59202c","name":"iCloud startup","method":"GET","ret":"txt","url":"","x":186,"y":1355,"wires":[["add3f9c3.4ecca8"]]},{"id":"add3f9c3.4ecca8","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":516,"y":1355,"wires":[["fbed162f.183348"],["88a080e0.a1f398"]]},{"id":"8d904fe6.20f62","type":"comment","z":"3576b4a7.59202c","name":"iCloud login","info":"-prepares the message for logging in to the iCloud account\n-sends the login message to the iCloud service","x":175,"y":857,"wires":[]},{"id":"dfcec929.4c8a38","type":"comment","z":"3576b4a7.59202c","name":"iCloud startup","info":"-prepares the message for retrieving values from the iCloud account, e.g.\n the names und guids of the existing reminder lists\n-sends the startup message to the iCloud service","x":176,"y":1175,"wires":[]},{"id":"1d84a607.438e2a","type":"comment","z":"3576b4a7.59202c","name":"iCloud create","info":"-prepares the message to create a date and/or geofence reminder\n-sends the creation message to the iCloud service","x":176,"y":1495,"wires":[]},{"id":"51e49f9b.94ebd8","type":"comment","z":"3576b4a7.59202c","name":"iCloud logout","info":"-logs out from the iCloud account","x":176,"y":1775,"wires":[]},{"id":"591ccc4f.71da54","type":"comment","z":"3576b4a7.59202c","name":"output","info":"-prepares the output of the service\n-currently, the result of the last operation is returned","x":156,"y":2035,"wires":[]},{"id":"fef638d4.47cf","type":"comment","z":"3576b4a7.59202c","name":"input","info":"-receives the input message and does some validation\n\nThe following message is an example for an input message.\n\n{\n\"appleId\":\"\",\n\"password\":\"\",\n\"reminderList\":\"Reminders\",\n\"priority\":1,\n\"title\":\"Get a birthday present for Lisa\",\n\"description\":\"Call Robert to ask what Lisa likes.\",\n\"proximity\":\"ARRIVE\",\n\"address\":\"Harrods, 87-135 Brompton Road, London SW1X 7XL\",\n\"locationName\":\"Harrods\",\n\"latitude\":\"51.4992917\",\n\"longitude\":\"-0.162811\",\n\"alarm\":\"2017-01-01T00:00:00\"\n}","x":156,"y":155,"wires":[]},{"id":"be4d8746.558498","type":"http request","z":"3576b4a7.59202c","name":"Nominatim","method":"GET","ret":"txt","url":"","x":516,"y":595,"wires":[["eba325cd.b4453"]]},{"id":"374bec67.cd7984","type":"function","z":"3576b4a7.59202c","name":"save Nominatim response","func":"var response = msg;\nvar addressLine = \"\";\n\nif (undefined === msg.payload.error) {\n    if (msg.payload.address.country_code === \"ca\" ||\n        msg.payload.address.country_code === \"gb\" ||\n        msg.payload.address.country_code === \"us\") {\n        addressLine =\n            (msg.payload.address.house_number || \"\") + \" \" +\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                \"\") + \" \" +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                \"\") + \" \" +\n            (msg.payload.address.postcode || \"\");\n    } else {\n        addressLine =\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                \"\") + \" \" +\n            (msg.payload.address.house_number || \"\") + \" \" +\n            (msg.payload.address.postcode || \"\") + \" \" +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                \"\");\n    }\n}\n\nflow.set(\"address\", addressLine);\n\nresponse.req = msg.req;\nresponse.res = msg.res;\n\nreturn response;","outputs":1,"noerr":0,"x":566,"y":715,"wires":[["c099d2f9.3703c8"]]},{"id":"807bfcf9.fb4de","type":"comment","z":"3576b4a7.59202c","name":"call Nominatim","info":"-calls Nominatim to determine the address for a given geoposition","x":526,"y":475,"wires":[]},{"id":"eba325cd.b4453","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":516,"y":655,"wires":[["374bec67.cd7984"],["88a080e0.a1f398"]]},{"id":"1d32c756.0c6df9","type":"subflow:408e1bb9.692b84","z":"3576b4a7.59202c","name":"logging","x":496,"y":535,"wires":[["be4d8746.558498"]]},{"id":"3fc0f6ee.5731a2","type":"subflow:5de36968.2088f","z":"3576b4a7.59202c","name":"error handling","x":516,"y":395,"wires":[[],["88a080e0.a1f398"]]},{"id":"51754f6d.94792","type":"function","z":"3576b4a7.59202c","name":"get time zones","func":"/* list of country codes, GMT offsets and time zone names */\nvar codes = [\n    [\"AD_GMT+1;Europe/Andorra\"],\n    [\"AE_GMT+4;Asia/Dubai\"],\n    [\"AF_GMT+4.5;Asia/Kabul\"],\n    [\"AG_GMT-4;America/Antigua\"],\n    [\"AI_GMT-4;America/Anguilla\"],\n    [\"AL_GMT+1;Europe/Tirane\"],\n    [\"AM_GMT+4;Asia/Yerevan\"],\n    [\"AO_GMT+1;Africa/Luanda\"],\n    [\"AQ_GMT;Antarctica/Troll\"],\n    [\"AQ_GMT+10;Antarctica/DumontDUrville\"],\n    [\"AQ_GMT+12;Antarctica/McMurdo\"],\n    [\"AQ_GMT+3;Antarctica/Syowa\"],\n    [\"AQ_GMT+5;Antarctica/Mawson\"],\n    [\"AQ_GMT+6;Antarctica/Vostok\"],\n    [\"AQ_GMT+7;Antarctica/Davis\"],\n    [\"AQ_GMT+8;Antarctica/Casey\"],\n    [\"AQ_GMT-3;Antarctica/Palmer\"],\n    [\"AR_GMT-3;America/Argentina/Buenos_Aires\"],\n    [\"AS_GMT-11;Pacific/Pago_Pago\"],\n    [\"AT_GMT+1;Europe/Vienna\"],\n    [\"AU_GMT+10;Australia/Brisbane\"],\n    [\"AU_GMT+10.5;Australia/Lord_Howe\"],\n    [\"AU_GMT+11;Antarctica/Macquarie\"],\n    [\"AU_GMT+8;Australia/Perth\"],\n    [\"AU_GMT+8.75;Australia/Eucla\"],\n    [\"AU_GMT+9.5;Australia/Adelaide\"],\n    [\"AW_GMT-4;America/Aruba\"],\n    [\"AX_GMT+2;Europe/Mariehamn\"],\n    [\"AZ_GMT+4;Asia/Baku\"],\n    [\"BA_GMT+1;Europe/Sarajevo\"],\n    [\"BB_GMT-4;America/Barbados\"],\n    [\"BD_GMT+6;Asia/Dhaka\"],\n    [\"BE_GMT+1;Europe/Brussels\"],\n    [\"BF_GMT;Africa/Ouagadougou\"],\n    [\"BG_GMT+2;Europe/Sofia\"],\n    [\"BH_GMT+3;Asia/Bahrain\"],\n    [\"BI_GMT+2;Africa/Bujumbura\"],\n    [\"BJ_GMT+1;Africa/Porto-Novo\"],\n    [\"BL_GMT-4;America/St_Barthelemy\"],\n    [\"BM_GMT-4;Atlantic/Bermuda\"],\n    [\"BN_GMT+8;Asia/Brunei\"],\n    [\"BO_GMT-4;America/La_Paz\"],\n    [\"BQ_GMT-4;America/Kralendijk\"],\n    [\"BR_GMT-2;America/Noronha\"],\n    [\"BR_GMT-3;America/Araguaina\"],\n    [\"BR_GMT-4;America/Boa_Vista\"],\n    [\"BR_GMT-5;America/Eirunepe\"],\n    [\"BT_GMT+6;Asia/Thimphu\"],\n    [\"BW_GMT+2;Africa/Gaborone\"],\n    [\"BY_GMT+3;Europe/Minsk\"],\n    [\"BZ_GMT-6;America/Belize\"],\n    [\"CA_GMT-3.5;America/St_Johns\"],\n    [\"CA_GMT-4;America/Blanc-Sablon\"],\n    [\"CA_GMT-5;America/Atikokan\"],\n    [\"CA_GMT-6;America/Rainy_River\"],\n    [\"CA_GMT-7;America/Cambridge_Bay\"],\n    [\"CA_GMT-8;America/Dawson\"],\n    [\"CC_GMT+6.5;Indian/Cocos\"],\n    [\"CD_GMT+1;Africa/Kinshasa\"],\n    [\"CD_GMT+2;Africa/Lubumbashi\"],\n    [\"CF_GMT+1;Africa/Bangui\"],\n    [\"CG_GMT+1;Africa/Brazzaville\"],\n    [\"CH_GMT+1;Europe/Zurich\"],\n    [\"CI_GMT;Africa/Abidjan\"],\n    [\"CK_GMT-10;Pacific/Rarotonga\"],\n    [\"CL_GMT-3;America/Santiago\"],\n    [\"CL_GMT-5;Pacific/Easter\"],\n    [\"CM_GMT+1;Africa/Douala\"],\n    [\"CN_GMT+6;Asia/Urumqi\"],\n    [\"CN_GMT+8;Asia/Shanghai\"],\n    [\"CO_GMT-5;America/Bogota\"],\n    [\"CR_GMT-6;America/Costa_Rica\"],\n    [\"CU_GMT-5;America/Havana\"],\n    [\"CV_GMT-1;Atlantic/Cape_Verde\"],\n    [\"CW_GMT-4;America/Curacao\"],\n    [\"CX_GMT+7;Indian/Christmas\"],\n    [\"CY_GMT+2;Asia/Nicosia\"],\n    [\"CZ_GMT+1;Europe/Prague\"],\n    [\"DE_GMT+1;Europe/Berlin\"],\n    [\"DJ_GMT+3;Africa/Djibouti\"],\n    [\"DK_GMT+1;Europe/Copenhagen\"],\n    [\"DM_GMT-4;America/Dominica\"],\n    [\"DO_GMT-4;America/Santo_Domingo\"],\n    [\"DZ_GMT+1;Africa/Algiers\"],\n    [\"EC_GMT-5;America/Guayaquil\"],\n    [\"EC_GMT-6;Pacific/Galapagos\"],\n    [\"EE_GMT+2;Europe/Tallinn\"],\n    [\"EG_GMT+2;Africa/Cairo\"],\n    [\"EH_GMT;Africa/El_Aaiun\"],\n    [\"ER_GMT+3;Africa/Asmara\"],\n    [\"ES_GMT;Atlantic/Canary\"],\n    [\"ES_GMT+1;Europe/Madrid\"],\n    [\"ET_GMT+3;Africa/Addis_Ababa\"],\n    [\"FI_GMT+2;Europe/Helsinki\"],\n    [\"FJ_GMT+12;Pacific/Fiji\"],\n    [\"FK_GMT-3;Atlantic/Stanley\"],\n    [\"FM_GMT+10;Pacific/Chuuk\"],\n    [\"FM_GMT+11;Pacific/Kosrae\"],\n    [\"FO_GMT;Atlantic/Faroe\"],\n    [\"FR_GMT+1;Europe/Paris\"],\n    [\"GA_GMT+1;Africa/Libreville\"],\n    [\"GB_GMT;Europe/London\"],\n    [\"GD_GMT-4;America/Grenada\"],\n    [\"GE_GMT+4;Asia/Tbilisi\"],\n    [\"GF_GMT-3;America/Cayenne\"],\n    [\"GG_GMT;Europe/Guernsey\"],\n    [\"GH_GMT;Africa/Accra\"],\n    [\"GI_GMT+1;Europe/Gibraltar\"],\n    [\"GL_GMT;America/Danmarkshavn\"],\n    [\"GL_GMT-1;America/Scoresbysund\"],\n    [\"GL_GMT-3;America/Godthab\"],\n    [\"GL_GMT-4;America/Thule\"],\n    [\"GM_GMT;Africa/Banjul\"],\n    [\"GN_GMT;Africa/Conakry\"],\n    [\"GP_GMT-4;America/Guadeloupe\"],\n    [\"GQ_GMT+1;Africa/Malabo\"],\n    [\"GR_GMT+2;Europe/Athens\"],\n    [\"GS_GMT-2;Atlantic/South_Georgia\"],\n    [\"GT_GMT-6;America/Guatemala\"],\n    [\"GU_GMT+10;Pacific/Guam\"],\n    [\"GW_GMT;Africa/Bissau\"],\n    [\"GY_GMT-4;America/Guyana\"],\n    [\"HK_GMT+8;Asia/Hong_Kong\"],\n    [\"HN_GMT-6;America/Tegucigalpa\"],\n    [\"HR_GMT+1;Europe/Zagreb\"],\n    [\"HT_GMT-5;America/Port-au-Prince\"],\n    [\"HU_GMT+1;Europe/Budapest\"],\n    [\"ID_GMT+7;Asia/Jakarta\"],\n    [\"ID_GMT+8;Asia/Makassar\"],\n    [\"ID_GMT+9;Asia/Jayapura\"],\n    [\"IE_GMT;Europe/Dublin\"],\n    [\"IL_GMT+2;Asia/Jerusalem\"],\n    [\"IM_GMT;Europe/Isle_of_Man\"],\n    [\"IN_GMT+5.5;Asia/Kolkata\"],\n    [\"IO_GMT+6;Indian/Chagos\"],\n    [\"IQ_GMT+3;Asia/Baghdad\"],\n    [\"IR_GMT+3.5;Asia/Tehran\"],\n    [\"IS_GMT;Atlantic/Reykjavik\"],\n    [\"IT_GMT+1;Europe/Rome\"],\n    [\"JE_GMT;Europe/Jersey\"],\n    [\"JM_GMT-5;America/Jamaica\"],\n    [\"JO_GMT+2;Asia/Amman\"],\n    [\"JP_GMT+9;Asia/Tokyo\"],\n    [\"KE_GMT+3;Africa/Nairobi\"],\n    [\"KG_GMT+6;Asia/Bishkek\"],\n    [\"KH_GMT+7;Asia/Phnom_Penh\"],\n    [\"KI_GMT+12;Pacific/Tarawa\"],\n    [\"KI_GMT+13;Pacific/Enderbury\"],\n    [\"KI_GMT+14;Pacific/Kiritimati\"],\n    [\"KM_GMT+3;Indian/Comoro\"],\n    [\"KN_GMT-4;America/St_Kitts\"],\n    [\"KP_GMT+8.5;Asia/Pyongyang\"],\n    [\"KR_GMT+9;Asia/Seoul\"],\n    [\"KW_GMT+3;Asia/Kuwait\"],\n    [\"KY_GMT-5;America/Cayman\"],\n    [\"KZ_GMT+5;Asia/Aqtau\"],\n    [\"KZ_GMT+6;Asia/Almaty\"],\n    [\"LA_GMT+7;Asia/Vientiane\"],\n    [\"LB_GMT+2;Asia/Beirut\"],\n    [\"LC_GMT-4;America/St_Lucia\"],\n    [\"LI_GMT+1;Europe/Vaduz\"],\n    [\"LK_GMT+5.5;Asia/Colombo\"],\n    [\"LR_GMT;Africa/Monrovia\"],\n    [\"LS_GMT+2;Africa/Maseru\"],\n    [\"LT_GMT+2;Europe/Vilnius\"],\n    [\"LU_GMT+1;Europe/Luxembourg\"],\n    [\"LV_GMT+2;Europe/Riga\"],\n    [\"LY_GMT+2;Africa/Tripoli\"],\n    [\"MA_GMT;Africa/Casablanca\"],\n    [\"MC_GMT+1;Europe/Monaco\"],\n    [\"MD_GMT+2;Europe/Chisinau\"],\n    [\"ME_GMT+1;Europe/Podgorica\"],\n    [\"MF_GMT-4;America/Marigot\"],\n    [\"MG_GMT+3;Indian/Antananarivo\"],\n    [\"MH_GMT+12;Pacific/Kwajalein\"],\n    [\"MK_GMT+1;Europe/Skopje\"],\n    [\"ML_GMT;Africa/Bamako\"],\n    [\"MM_GMT+6.5;Asia/Rangoon\"],\n    [\"MN_GMT+7;Asia/Hovd\"],\n    [\"MN_GMT+8;Asia/Choibalsan\"],\n    [\"MO_GMT+8;Asia/Macau\"],\n    [\"MP_GMT+10;Pacific/Saipan\"],\n    [\"MQ_GMT-4;America/Martinique\"],\n    [\"MR_GMT;Africa/Nouakchott\"],\n    [\"MS_GMT-4;America/Montserrat\"],\n    [\"MT_GMT+1;Europe/Malta\"],\n    [\"MU_GMT+4;Indian/Mauritius\"],\n    [\"MV_GMT+5;Indian/Maldives\"],\n    [\"MW_GMT+2;Africa/Blantyre\"],\n    [\"MX_GMT-5;America/Cancun\"],\n    [\"MX_GMT-6;America/Bahia_Banderas\"],\n    [\"MX_GMT-7;America/Chihuahua\"],\n    [\"MX_GMT-8;America/Santa_Isabel\"],\n    [\"MY_GMT+8;Asia/Kuala_Lumpur\"],\n    [\"MZ_GMT+2;Africa/Maputo\"],\n    [\"NA_GMT+1;Africa/Windhoek\"],\n    [\"NC_GMT+11;Pacific/Noumea\"],\n    [\"NE_GMT+1;Africa/Niamey\"],\n    [\"NF_GMT+11;Pacific/Norfolk\"],\n    [\"NG_GMT+1;Africa/Lagos\"],\n    [\"NI_GMT-6;America/Managua\"],\n    [\"NL_GMT+1;Europe/Amsterdam\"],\n    [\"NO_GMT+1;Europe/Oslo\"],\n    [\"NP_GMT+5.75;Asia/Kathmandu\"],\n    [\"NR_GMT+12;Pacific/Nauru\"],\n    [\"NU_GMT-11;Pacific/Niue\"],\n    [\"NZ_GMT+12;Pacific/Auckland\"],\n    [\"NZ_GMT+12.75;Pacific/Chatham\"],\n    [\"OM_GMT+4;Asia/Muscat\"],\n    [\"PA_GMT-5;America/Panama\"],\n    [\"PE_GMT-5;America/Lima\"],\n    [\"PF_GMT-10;Pacific/Tahiti\"],\n    [\"PF_GMT-9;Pacific/Gambier\"],\n    [\"PF_GMT-9.5;Pacific/Marquesas\"],\n    [\"PG_GMT+10;Pacific/Port_Moresby\"],\n    [\"PG_GMT+11;Pacific/Bougainville\"],\n    [\"PH_GMT+8;Asia/Manila\"],\n    [\"PK_GMT+5;Asia/Karachi\"],\n    [\"PL_GMT+1;Europe/Warsaw\"],\n    [\"PM_GMT-3;America/Miquelon\"],\n    [\"PN_GMT-8;Pacific/Pitcairn\"],\n    [\"PR_GMT-4;America/Puerto_Rico\"],\n    [\"PS_GMT+2;Asia/Gaza\"],\n    [\"PS_GMT+2;Asia/Hebron\"],\n    [\"PT_GMT;Europe/Lisbon\"],\n    [\"PT_GMT-1;Atlantic/Azores\"],\n    [\"PW_GMT+9;Pacific/Palau\"],\n    [\"PY_GMT-4;America/Asuncion\"],\n    [\"QA_GMT+3;Asia/Qatar\"],\n    [\"RE_GMT+4;Indian/Reunion\"],\n    [\"RO_GMT+2;Europe/Bucharest\"],\n    [\"RS_GMT+1;Europe/Belgrade\"],\n    [\"RU_GMT+10;Asia/Magadan\"],\n    [\"RU_GMT+11;Asia/Srednekolymsk\"],\n    [\"RU_GMT+12;Asia/Anadyr\"],\n    [\"RU_GMT+2;Europe/Kaliningrad\"],\n    [\"RU_GMT+3;Europe/Moscow\"],\n    [\"RU_GMT+4;Europe/Samara\"],\n    [\"RU_GMT+5;Asia/Yekaterinburg\"],\n    [\"RU_GMT+6;Asia/Novosibirsk\"],\n    [\"RU_GMT+7;Asia/Krasnoyarsk\"],\n    [\"RU_GMT+8;Asia/Chita\"],\n    [\"RU_GMT+9;Asia/Khandyga\"],\n    [\"RW_GMT+2;Africa/Kigali\"],\n    [\"SA_GMT+3;Asia/Riyadh\"],\n    [\"SB_GMT+11;Pacific/Guadalcanal\"],\n    [\"SC_GMT+4;Indian/Mahe\"],\n    [\"SD_GMT+3;Africa/Khartoum\"],\n    [\"SE_GMT+1;Europe/Stockholm\"],\n    [\"SG_GMT+8;Asia/Singapore\"],\n    [\"SH_GMT;Atlantic/St_Helena\"],\n    [\"SI_GMT+1;Europe/Ljubljana\"],\n    [\"SJ_GMT+1;Arctic/Longyearbyen\"],\n    [\"SK_GMT+1;Europe/Bratislava\"],\n    [\"SL_GMT;Africa/Freetown\"],\n    [\"SM_GMT+1;Europe/San_Marino\"],\n    [\"SN_GMT;Africa/Dakar\"],\n    [\"SO_GMT+3;Africa/Mogadishu\"],\n    [\"SR_GMT-3;America/Paramaribo\"],\n    [\"SS_GMT+3;Africa/Juba\"],\n    [\"ST_GMT;Africa/Sao_Tome\"],\n    [\"SV_GMT-6;America/El_Salvador\"],\n    [\"SX_GMT-4;America/Lower_Princes\"],\n    [\"SY_GMT+2;Asia/Damascus\"],\n    [\"SZ_GMT+2;Africa/Mbabane\"],\n    [\"TC_GMT-4;America/Grand_Turk\"],\n    [\"TD_GMT+1;Africa/Ndjamena\"],\n    [\"TF_GMT+5;Indian/Kerguelen\"],\n    [\"TG_GMT;Africa/Lome\"],\n    [\"TH_GMT+7;Asia/Bangkok\"],\n    [\"TJ_GMT+5;Asia/Dushanbe\"],\n    [\"TK_GMT+13;Pacific/Fakaofo\"],\n    [\"TL_GMT+9;Asia/Dili\"],\n    [\"TM_GMT+5;Asia/Ashgabat\"],\n    [\"TN_GMT+1;Africa/Tunis\"],\n    [\"TO_GMT+13;Pacific/Tongatapu\"],\n    [\"TR_GMT+2;Europe/Istanbul\"],\n    [\"TT_GMT-4;America/Port_of_Spain\"],\n    [\"TV_GMT+12;Pacific/Funafuti\"],\n    [\"TW_GMT+8;Asia/Taipei\"],\n    [\"TZ_GMT+3;Africa/Dar_es_Salaam\"],\n    [\"UA_GMT+2;Europe/Kiev\"],\n    [\"UG_GMT+3;Africa/Kampala\"],\n    [\"UM_GMT-10;Pacific/Johnston\"],\n    [\"UM_GMT+12;Pacific/Wake\"],\n    [\"UM_GMT-11;Pacific/Midway\"],\n    [\"US_GMT-10;America/Adak\"],\n    [\"US_GMT-5;America/Detroit\"],\n    [\"US_GMT-6;America/Chicago\"],\n    [\"US_GMT-7;America/Boise\"],\n    [\"US_GMT-8;America/Los_Angeles\"],\n    [\"US_GMT-9;America/Anchorage\"],\n    [\"UY_GMT-3;America/Montevideo\"],\n    [\"UZ_GMT+5;Asia/Samarkand\"],\n    [\"VA_GMT+1;Europe/Vatican\"],\n    [\"VC_GMT-4;America/St_Vincent\"],\n    [\"VE_GMT-4.5;America/Caracas\"],\n    [\"VG_GMT-4;America/Tortola\"],\n    [\"VI_GMT-4;America/St_Thomas\"],\n    [\"VN_GMT+7;Asia/Ho_Chi_Minh\"],\n    [\"VU_GMT+11;Pacific/Efate\"],\n    [\"WF_GMT+12;Pacific/Wallis\"],\n    [\"WS_GMT+13;Pacific/Apia\"],\n    [\"YE_GMT+3;Asia/Aden\"],\n    [\"YT_GMT+3;Indian/Mayotte\"],\n    [\"ZA_GMT+2;Africa/Johannesburg\"],\n    [\"ZM_GMT+2;Africa/Lusaka\"],\n    [\"ZW_GMT+2;Africa/Harare\"]\n];\n\n/* determines the time zone name for a given country code and GMT offset */\nfunction timezonename(countryCode, gmt) {\n    var left = 0;\n    var right = codes.length - 1;\n    var k;\n    var code;\n    var searchString = countryCode + \"_\" + gmt;\n\n    while (left <= right) {\n        k = Math.round(left + ((right - left) / 2));\n        code = codes[k];\n\n        code_0 = code[0].split(\";\")[0];\n\n        if (searchString.localeCompare(code_0) < 0) {\n            right = k - 1;\n        } else if (searchString.localeCompare(code_0) === 0) {\n            /* found entry */\n            return code[0].split(\";\")[1];\n        } else {\n            left = k + 1;\n        }\n    }\n    \n    /* return as default */\n    return \"Europe/London\";\n}\n\nvar startupRequest = msg;\n\nstartupRequest.req = msg.req;\nstartupRequest.res = msg.res;\n\nflow.set(\"usertz\", timezonename(msg.payload.requestInfo.country,\n                                msg.payload.requestInfo.timeZone));\n\nreturn startupRequest;","outputs":1,"noerr":0,"x":186,"y":1235,"wires":[["2abd647d.db45ec"]]},{"id":"849927f3.c6b198","type":"comment","z":"3576b4a7.59202c","name":"version 1.2","info":"version 1.0: initial version\nversion 1.1: added mapping for time zone names, added exception handling\nversion 1.2: bug fix for multiple incoming messages within seconds\n             added control mechanism using a semaphore","x":166,"y":55,"wires":[]},{"id":"afe96c4b.f","type":"catch","z":"3576b4a7.59202c","name":"","scope":null,"x":166,"y":2175,"wires":[["a12b6aa4.974808"]]},{"id":"a12b6aa4.974808","type":"function","z":"3576b4a7.59202c","name":"set exception","func":"flow.set(\"exceptionsource\", msg.error.source.name);\nflow.set(\"exception\", msg.error.message);\n\nnode.error(flow.get(\"exceptionsource\"));\nnode.error(flow.get(\"exception\"));","outputs":1,"noerr":0,"x":526,"y":2175,"wires":[[]]},{"id":"950b9157.3cf318","type":"delay","z":"3576b4a7.59202c","name":"","pauseType":"delay","timeout":"5","timeoutUnits":"seconds","rate":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":506,"y":215,"wires":[["f2e9204.f1e0ee"]]},{"id":"f2e9204.f1e0ee","type":"function","z":"3576b4a7.59202c","name":"lock","func":"if (undefined === global.get(\"lock\")) {\n    global.set(\"lock\", false);\n}\n\nif (false === global.get(\"lock\")) {\n    global.set(\"lock\", true);\n    return [null, msg];\n}\n\nif (true === global.get(\"lock\")) {\n    /* in case the lock is set put message in loop -> 1st output */\n    return [msg, null];\n} else {\n    /* in case the lock is not set the message can be processed -> 2nd output */\n    return [null, msg];\n}","outputs":"2","noerr":0,"x":496,"y":315,"wires":[["950b9157.3cf318"],["f70698c3.fdbf08"]]}]