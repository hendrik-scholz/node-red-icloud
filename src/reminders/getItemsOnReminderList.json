[
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "87179522.310ed8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "7bb677c2.e16998",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "65741c34.9d2ab4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "7cf41d7.fc7efe4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "3cdf500c.7ea138",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "4221290d.7176a",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fee878cd.8978a8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "365758fe.e5548",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "e04a7ce8.842ac",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "2b898726.4dc9d",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "be2332a8.9a2b7",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "837f3290.196c28",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "d7f7f72b.ef513",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "ab1467c9.fa1508",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "28776e8d.427fe2",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "66f59636.b9a47",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "c9a924a1.31168",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "7920d58f.bd6404",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "5f0e9a05.7b0514",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "1e0c800d.c8d6d",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "c2c3d734.0cd568",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "9d347e5e.bf559",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\n    \"filename\" : filename\n};\n\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    ' [' + \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].step +\n    ']: ';\n\nvar logMessage = {\n    \"filename\" : filename\n};\n\nlogMessage.payload = {\n    \"url\" : msg.url,\n    \"statuscode\" : msg.statusCode,\n    \"headers\" : msg.headers,\n    \"payload\" : replacePlaintext(msg, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "114669e9.ec3c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fd4d19b8.ff0d28",
        "type": "subflow",
        "name": "error handling",
        "info": "",
        "in": [
            {
                "x": 45,
                "y": 169,
                "wires": [
                    {
                        "id": "595e324b.072574"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 723,
                "y": 169,
                "wires": [
                    {
                        "id": "28ac27ed.ecfe18",
                        "port": 0
                    },
                    {
                        "id": "595e324b.072574",
                        "port": 1
                    }
                ]
            },
            {
                "x": 723,
                "y": 226,
                "wires": [
                    {
                        "id": "595e324b.072574",
                        "port": 2
                    }
                ]
            }
        ]
    },
    {
        "id": "595e324b.072574",
        "type": "function",
        "z": "fd4d19b8.ff0d28",
        "name": "check",
        "func": "/* error codes */\nvar errorCodes = {\n    '{\"error\":7}' : {'title': 'Invalid credentials', 'detail': 'Invalid Apple ID'},\n    '{\"error\":1}' : {'title': 'Invalid credentials',  'detail': 'Invalid password'},\n    'Error: getaddrinfo EAI_AGAIN setup.icloud.com:443 : https://setup.icloud.com/setup/ws/1/login': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'}\n};\n\n/* function to create error messages */\nfunction createErrorMessage(status, source, detail) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = status;\n    \n    var error = {\n        \"status\": status,\n        \"source\": { \"pointer\": source },\n        \"title\": errorCodes[detail] ? errorCodes[detail].title : '',\n        \"detail\": errorCodes[detail] ? errorCodes[detail].detail : detail\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check HTTP response code */\nif (msg.statusCode === 200) {\n    /* recreate message from input */\n    var responseOk = {};\n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    responseOk.headers = msg.headers;\n    responseOk.payload = msg.payload;\n    responseOk.ldm = msg.ldm;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== '') {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        responseOk.ldm = msg.ldm;\n        \n        return[null, responseOk, null];\n    }\n} else {\n    /* recreate message from input */\n    var errorResponse = {};\n    var statusCode = msg.statusCode;\n    var payload = JSON.parse(msg.payload);\n\n    /* in case no HTTP response code is given */    \n    if (isNaN(statusCode)) {\n        statusCode = 500;\n    }\n\n    /* check whether there is an error object */\n    if(undefined !== payload.errors) {\n        /* \n         * In case there is an error already, use this error object\n         * to return the root cause of the problem.\n         */\n        errorResponse.req = msg.req;\n        errorResponse.res = msg.res;\n        errorResponse.payload = payload;\n        errorResponse.statusCode = statusCode;\n    } else {\n        errorResponse = createErrorMessage(statusCode, msg.responseUrl, msg.payload)\n    }\n\n    return[null, null, errorResponse];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 171,
        "y": 168,
        "wires": [
            [
                "28ac27ed.ecfe18"
            ],
            [
                "3b615dca.4c3432"
            ],
            []
        ]
    },
    {
        "id": "3b615dca.4c3432",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "logging",
        "x": 516,
        "y": 141.5,
        "wires": [
            []
        ]
    },
    {
        "id": "28ac27ed.ecfe18",
        "type": "json",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "3b615dca.4c3432"
            ]
        ]
    },
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "87179522.310ed8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "7bb677c2.e16998",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "65741c34.9d2ab4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "7cf41d7.fc7efe4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "3cdf500c.7ea138",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "4221290d.7176a",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fee878cd.8978a8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "365758fe.e5548",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "e04a7ce8.842ac",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "2b898726.4dc9d",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "be2332a8.9a2b7",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "837f3290.196c28",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "d7f7f72b.ef513",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "ab1467c9.fa1508",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "28776e8d.427fe2",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "66f59636.b9a47",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "c9a924a1.31168",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "7920d58f.bd6404",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "5f0e9a05.7b0514",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "1e0c800d.c8d6d",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "c2c3d734.0cd568",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "9d347e5e.bf559",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\n    \"filename\" : filename\n};\n\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    ' [' + \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].step +\n    ']: ';\n\nvar logMessage = {\n    \"filename\" : filename\n};\n\nlogMessage.payload = {\n    \"url\" : msg.url,\n    \"statuscode\" : msg.statusCode,\n    \"headers\" : msg.headers,\n    \"payload\" : replacePlaintext(msg, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "114669e9.ec3c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "e00b4175.b968",
        "type": "tab",
        "label": "get items on reminder list"
    },
    {
        "id": "c050d4d9.c4c328",
        "type": "http in",
        "z": "e00b4175.b968",
        "name": "get reminders on list",
        "url": "/reminder/:list",
        "method": "get",
        "swaggerDoc": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "8991cdcf.0f539"
            ]
        ]
    },
    {
        "id": "8991cdcf.0f539",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "save input to LDM",
        "func": "var output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.payload = msg.payload;\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/reminder/:list\" },\n        \"title\": 'Error while saving input to LDM',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check input */\nif ((undefined === msg.payload.appleId || msg.payload.appleId.length === 0) ||\n    (undefined === msg.payload.password || msg.payload.password.length === 0)) {\n    /* appleId or password undefined or not empty */\n    return [null, createErrorMessage('One or more elements are missing ' + \n                        '(appleId, password).')];\n}\n\n/* save input to LDM */\noutput.ldm = {\n    \"process\": {\n        \"trace\": [{\n            \"step\": \"save input to LDM\",\n            \"timestamp\": new Date().getTime()\n        }],\n        \"durationInMs\": null\n    },\n    \"header\": {\n        \"origin\": \"https://www.icloud.com\",\n        \"userAgent\": \"node-red-icloud/1.2.0 (Node-RED)\",\n        \"appleId\": msg.req.query.appleId,\n        \"password\": msg.req.query.password,\n        \"list\": msg.req.params.list ? msg.req.params.list : null,\n        \"sessionCookie\": null,\n        \"remindersurl\": null,\n        \"languageCode\": null,\n        \"dsid\": null,\n    \t\"usertz\": null\n    },\n    \"tasklist\": [{\n        \"guid\": null,\n        \"title\": msg.req.params.list,\n        \"color\": null,\n        \"tasks\": []\n    }]\n};\n\nreturn [output, null];",
        "outputs": "2",
        "noerr": 0,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "3d7f76f4.8a729a"
            ],
            [
                "fddbda2d.9a7978"
            ]
        ]
    },
    {
        "id": "4ef14379.67f284",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "prepare get items",
        "func": "/* recreate message from input */\nvar listRequest = {};\nlistRequest.req = msg.req;\nlistRequest.res = msg.res;\nlistRequest.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"save response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nlistRequest.ldm.process.trace.push(trace);\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/reminder/:list\" },\n        \"title\": 'Error while preparing \"get items\" request',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\nvar guid;\n\nfor(var k in msg.ldm.tasklist) {\n    var tasklist = msg.ldm.tasklist[k];\n\n    if(tasklist.title === msg.ldm.header.list) {\n        guid = tasklist.guid;\n    }\n}\n\nif(undefined !== guid) {\n    /* create URL */\n    var url = listRequest.ldm.header.remindersurl +\n            \"/rd/reminders/\" +\n            guid +\n            \"?\" +\n            'usertz=' + msg.ldm.header.usertz +\n            '&lang=' + msg.ldm.header.languageCode +\n            '&dsid=' + msg.ldm.header.dsid;\n    \n    /* set URL */\n    listRequest.url = url;\n    \n    /* HTTP header */\n    listRequest.headers = {\n        \"origin\": \"https://www.icloud.com\",\n        \"cookie\": listRequest.ldm.header.sessionCookie\n    };\n    \n    return [listRequest, null];\n} else {\n    /* list not found */\n    return [null, createErrorMessage('The list ' + msg.ldm.header.list + ' does not exist.')];\n}",
        "outputs": "2",
        "noerr": 0,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "fb783af4.930e58"
            ],
            [
                "f4e48ca7.91a438"
            ]
        ]
    },
    {
        "id": "75672673.3298f8",
        "type": "http request",
        "z": "e00b4175.b968",
        "name": "iCloud get reminders",
        "method": "GET",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 180,
        "y": 700,
        "wires": [
            [
                "841d43a3.dd624"
            ]
        ]
    },
    {
        "id": "c5d7dfba.d394c",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "prepare response",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"prepare reminder response\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\n/* determine tasklist */\nvar indexOfTaskList = 0;\n\nfor(var k in response.ldm.tasklist) {\n    if(response.ldm.tasklist[k].title === msg.ldm.header.list) {\n        break;\n    }\n    \n    indexOfTaskList++;\n}\n\nif (undefined === msg.ldm.process.errors) {\n    response.payload = {};\n    response.payload.tasks = msg.ldm.tasklist[indexOfTaskList].tasks;\n} else {\n   response.payload = msg.ldm.process.errors;\n}\n\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nresponse.headers = {\n    \"Access-Control-Allow-Origin\": '*'\n};\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 860,
        "wires": [
            [
                "ce0b50ba.f8d448"
            ]
        ]
    },
    {
        "id": "49199cee.da6834",
        "type": "http response",
        "z": "e00b4175.b968",
        "name": "get reminders on list response",
        "x": 730,
        "y": 1020,
        "wires": []
    },
    {
        "id": "134317b5.4501b8",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "save response to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"save response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\n/* determine tasklist */\nvar indexOfTaskList = 0;\n\nfor(var k in response.ldm.tasklist) {\n    if(response.ldm.tasklist[k].title === msg.ldm.header.list) {\n        break;\n    }\n    \n    indexOfTaskList++;\n}\n\nfor(var k in msg.payload.Reminders) {\n    var location = undefined;\n\n    /* push only tasks that belong to the list for which tasks are requested */\n    if(msg.payload.Reminders[k].pGuid === msg.ldm.tasklist[indexOfTaskList].guid) {\n\n        /* set location only if exists */\n        if(msg.payload.Reminders[k].alarms.length > 0 && \n           msg.payload.Reminders[k].alarms[0].structuredLocation !== undefined) {\n            location = {\n                \"name\": msg.payload.Reminders[k].alarms[0].structuredLocation.locationName,\n            \t\"address\": msg.payload.Reminders[k].alarms[0].structuredLocation.address,\n            \t\"latitude\": msg.payload.Reminders[k].alarms[0].structuredLocation.latitude,\n            \t\"longitude\": msg.payload.Reminders[k].alarms[0].structuredLocation.longitude,\n            \t\"proximity\": msg.payload.Reminders[k].alarms[0].proximity\n    \t    };\n        }\n    \n        response.ldm.tasklist[indexOfTaskList].tasks.push(\n            {\n                \"guid\": msg.payload.Reminders[k].guid,\n                \"title\": msg.payload.Reminders[k].title,\n                \"description\": msg.payload.Reminders[k].description,\n                \"priority\": msg.payload.Reminders[k].priority,\n                \"done\": msg.payload.Reminders[k].completedDate ? true : false,\n                \"alarm\": msg.payload.Reminders[k].dueDate,\n                \"location\": location ? location : null\n        });\n    }\n}\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 780,
        "wires": [
            [
                "4d6260a9.e2ffd"
            ]
        ]
    },
    {
        "id": "3d7f76f4.8a729a",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 140,
        "y": 300,
        "wires": [
            [
                "506f28e6.8f6f1"
            ]
        ]
    },
    {
        "id": "a87d5929.672dd",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "e00b4175.b968",
        "name": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "3e542f0b.eae5c"
            ],
            [
                "49199cee.da6834"
            ]
        ]
    },
    {
        "id": "841d43a3.dd624",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "e00b4175.b968",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "134317b5.4501b8"
            ],
            [
                "49199cee.da6834"
            ]
        ]
    },
    {
        "id": "fb783af4.930e58",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "name": "",
        "x": 400,
        "y": 540,
        "wires": [
            [
                "75672673.3298f8"
            ]
        ]
    },
    {
        "id": "4d6260a9.e2ffd",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 780,
        "wires": [
            [
                "c5d7dfba.d394c"
            ]
        ]
    },
    {
        "id": "ce0b50ba.f8d448",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 860,
        "wires": [
            [
                "49199cee.da6834"
            ]
        ]
    },
    {
        "id": "36d4e1f0.998dee",
        "type": "comment",
        "z": "e00b4175.b968",
        "name": "version 1.1",
        "info": "version 1.0: initial version\nversion 1.1: added check for appleId and password in 'save input to LDM'\n             added logging and exception handling",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "506f28e6.8f6f1",
        "type": "http request",
        "z": "e00b4175.b968",
        "name": "call session cache",
        "method": "POST",
        "ret": "txt",
        "url": "http://127.0.0.1:1880/icloud/login",
        "tls": "",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "a87d5929.672dd"
            ]
        ]
    },
    {
        "id": "3e542f0b.eae5c",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "save response to LDM",
        "func": "var output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.ldm = {\n    \"process\": msg.ldm.process,\n    \"header\": msg.payload.header,\n    \"tasklist\": msg.payload.tasklist\n};\n\n/* restore list from original request */\noutput.ldm.header.list = msg.ldm.header.list;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"save response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\noutput.ldm.process.trace.push(trace);\n\nreturn output;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 460,
        "wires": [
            [
                "275bb24.581424e"
            ]
        ]
    },
    {
        "id": "275bb24.581424e",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "4ef14379.67f284"
            ]
        ]
    },
    {
        "id": "49e3d12.af3c3b",
        "type": "catch",
        "z": "e00b4175.b968",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 940,
        "wires": [
            [
                "ccff0b80.ae9358"
            ]
        ]
    },
    {
        "id": "ccff0b80.ae9358",
        "type": "function",
        "z": "e00b4175.b968",
        "name": "set exception",
        "func": "var response = {};\nresponse.req = null; //???\nresponse.res = null; //???\nresponse.ldm = null; //???\nresponse.payload = {};\nresponse.payload.errors = [];\n\nvar error = {\n    \"status\": 500,\n    \"source\": \"set exception\",\n    \"title\": msg.error.message,\n    \"detail\": msg.error.message\n};\n\nresponse.payload.errors.push(error);\n\nresponse.statusCode = 500;\n\n//node.error(msg.error.source.name);\n//node.error(msg.error.message);\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "317ece99.3014c2"
            ]
        ]
    },
    {
        "id": "317ece99.3014c2",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "49199cee.da6834"
            ]
        ]
    },
    {
        "id": "fddbda2d.9a7978",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 227,
        "wires": [
            [
                "49199cee.da6834"
            ]
        ]
    },
    {
        "id": "f4e48ca7.91a438",
        "type": "subflow:747253ec.210a54",
        "z": "e00b4175.b968",
        "x": 400,
        "y": 620,
        "wires": [
            [
                "49199cee.da6834"
            ]
        ]
    }
]