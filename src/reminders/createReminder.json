[
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "87179522.310ed8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "7bb677c2.e16998",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "65741c34.9d2ab4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "7cf41d7.fc7efe4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "3cdf500c.7ea138",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "4221290d.7176a",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fee878cd.8978a8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "365758fe.e5548",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "e04a7ce8.842ac",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "2b898726.4dc9d",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "be2332a8.9a2b7",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "837f3290.196c28",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "d7f7f72b.ef513",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "ab1467c9.fa1508",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "28776e8d.427fe2",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "66f59636.b9a47",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "c9a924a1.31168",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "7920d58f.bd6404",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "5f0e9a05.7b0514",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "1e0c800d.c8d6d",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "c2c3d734.0cd568",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "9d347e5e.bf559",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\n    \"filename\" : filename\n};\n\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    ' [' + \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].step +\n    ']: ';\n\nvar logMessage = {\n    \"filename\" : filename\n};\n\nlogMessage.payload = {\n    \"url\" : msg.url,\n    \"statuscode\" : msg.statusCode,\n    \"headers\" : msg.headers,\n    \"payload\" : replacePlaintext(msg, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "114669e9.ec3c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fd4d19b8.ff0d28",
        "type": "subflow",
        "name": "error handling",
        "info": "",
        "in": [
            {
                "x": 45,
                "y": 169,
                "wires": [
                    {
                        "id": "595e324b.072574"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 723,
                "y": 169,
                "wires": [
                    {
                        "id": "28ac27ed.ecfe18",
                        "port": 0
                    },
                    {
                        "id": "595e324b.072574",
                        "port": 1
                    }
                ]
            },
            {
                "x": 723,
                "y": 226,
                "wires": [
                    {
                        "id": "aa380213.dcc9f8",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "595e324b.072574",
        "type": "function",
        "z": "fd4d19b8.ff0d28",
        "name": "check",
        "func": "/* check HTTP response code */\nif (msg.statusCode === 200) {\n    /* recreate message from input */\n    var responseOk = {};\n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    responseOk.headers = msg.headers;\n    responseOk.payload = msg.payload;\n    responseOk.ldm = msg.ldm;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== '') {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        responseOk.ldm = msg.ldm;\n        \n        return[null, responseOk, null];\n    }\n} else {\n    /* recreate message from input */\n    var responseError = {}\n    responseError.req = msg.req;\n    responseError.res = msg.res;\n    responseError.ldm = msg.ldm;    \n    responseError.statusCode = msg.statusCode;\n\n    /* in case no HTTP response code is given */    \n    if (isNaN(msg.statusCode)) {\n        responseError.statusCode = 500;\n    }\n    \n    responseError.payload = msg.payload;\n\n    return[null, null, responseError];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 171,
        "y": 168,
        "wires": [
            [
                "28ac27ed.ecfe18"
            ],
            [
                "3b615dca.4c3432"
            ],
            [
                "aa380213.dcc9f8"
            ]
        ]
    },
    {
        "id": "3b615dca.4c3432",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "logging",
        "x": 516,
        "y": 141.5,
        "wires": [
            []
        ]
    },
    {
        "id": "28ac27ed.ecfe18",
        "type": "json",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "3b615dca.4c3432"
            ]
        ]
    },
    {
        "id": "aa380213.dcc9f8",
        "type": "json",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 330,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 608,
                "y": 102,
                "wires": [
                    {
                        "id": "747253ec.210a54",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "87179522.310ed8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "7bb677c2.e16998",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "65741c34.9d2ab4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "7cf41d7.fc7efe4",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "3cdf500c.7ea138",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "4221290d.7176a",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "fee878cd.8978a8",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "365758fe.e5548",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "e04a7ce8.842ac",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "2b898726.4dc9d",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "be2332a8.9a2b7",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "837f3290.196c28",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "d7f7f72b.ef513",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "ab1467c9.fa1508",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "28776e8d.427fe2",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "66f59636.b9a47",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "c9a924a1.31168",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "7920d58f.bd6404",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "5f0e9a05.7b0514",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "1e0c800d.c8d6d",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* \n * configure logging\n */\nvar logging = false;\nvar filename = \"/home/nodered/node-red-icloud\";\n/* define properties which values should not be logged as plaintext */\nvar list = [\"appleId\", \"apple_id\", \"password\"];\n\nif (!logging) {\n    return;\n}\n\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== \"undefined\" && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = \"xxx\";\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logMessage = {\"filename\":filename};\nlogMessage.payload = {\n    \"url\":msg.url,\n    \"statuscode\":msg.statusCode,\n    \"headers\":msg.headers,\n    \"payload\":replacePlaintext(msg.payload, list)\n};\n\nvar timestamp = {\"filename\":filename};\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    \" [\" + global.get(\"function\") + \"]: \";\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "c2c3d734.0cd568",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "9d347e5e.bf559",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 462,
        "y": 208,
        "wires": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar timestamp = {\n    \"filename\" : filename\n};\n\ntimestamp.payload = '\\r' +\n    new Date().toISOString() +\n    ' [' + \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].step +\n    ']: ';\n\nvar logMessage = {\n    \"filename\" : filename\n};\n\nlogMessage.payload = {\n    \"url\" : msg.url,\n    \"statuscode\" : msg.statusCode,\n    \"headers\" : msg.headers,\n    \"payload\" : replacePlaintext(msg, list)\n};\n\nreturn [timestamp, logMessage];",
        "outputs": "2",
        "noerr": 0,
        "x": 232,
        "y": 173,
        "wires": [
            [
                "114669e9.ec3c8e"
            ],
            [
                "9d347e5e.bf559"
            ]
        ]
    },
    {
        "id": "114669e9.ec3c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "log timestamp",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "x": 460,
        "y": 144,
        "wires": []
    },
    {
        "id": "3aed4340.8f7d1c",
        "type": "tab",
        "label": "create reminder"
    },
    {
        "id": "1a97957a.7bd443",
        "type": "http in",
        "z": "3aed4340.8f7d1c",
        "name": "reminder request",
        "url": "/reminders",
        "method": "post",
        "swaggerDoc": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "df9ff692.c43de"
            ]
        ]
    },
    {
        "id": "97467c85.971c9",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "prepare reminder request",
        "func": "/* recreate message from input */\nvar reminderRequest = {};\nreminderRequest.req = msg.req;\nreminderRequest.res = msg.res;\nreminderRequest.ldm = msg.ldm;\nreminderRequest.ldm.header = msg.payload.header;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"prepare reminder request\",\n    \"timestamp\": new Date().getTime()\n};\nreminderRequest.ldm.process.trace.push(trace);\n\n/* map priority values */\nvar priorityMap = {\n  \"1\" : 1,\n  \"2\" : 5,\n  \"3\" : 9,\n  null : null\n};\n\n/* function to generate guid */\nfunction generateGuid() {\n    var guid = '';\n\n    for (var i = 0; i < 32; i++) {\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            guid += \"-\";\n        }\n\n        guid += Math.floor(Math.random()*0xF).toString(0xF);\n    }\n\n    return guid;\n}\n\n/* function to format a date */\nfunction formatDate (dateString) {\n    var dateArray = [\n        parseInt(dateString.substring(0, 10).replace(/-/g, '')),\n        parseInt(dateString.substring(0, 4)),\n        parseInt(dateString.substring(5, 7)),\n        parseInt(dateString.substring(8, 10)),\n        parseInt(dateString.substring(11, 13)),\n        parseInt(dateString.substring(14, 16)),\n        0];\n    \n    return dateArray;\n}\n\n/* gets guid of list by given name */\nvar lists = msg.payload.tasklist;\nfor (var k in lists) {\n    if (lists[k].title === reminderRequest.ldm.tasklist[0].title) {\n        reminderRequest.ldm.tasklist[0].guid = lists[k].guid;\n        break;\n    }\n    \n    /* If the list the reminder should be put on to does not\n       exist, the reminder is put on one of the existing lists. */\n}\n\n/* create URL */\nvar url = msg.ldm.header.remindersurl +\n          '/rd/reminders/' +\n          msg.ldm.tasklist[0].guid +\n          '?' +\n          'usertz='+ msg.ldm.header.usertz +\n          '&lang=' + msg.ldm.header.languageCode +\n          '&dsid=' + msg.ldm.header.dsid;\n\n/* set URL */\nreminderRequest.url = url;\n\n/* HTTP header */\nreminderRequest.headers = {\n    \"origin\": msg.ldm.header.origin,\n    \"cookie\": msg.ldm.header.sessionCookie\n};\n\n/* payload */\nreminderRequest.payload = {\"Reminders\": {\n   \"guid\": generateGuid(),\n   \"pGuid\": reminderRequest.ldm.tasklist[0].guid,\n   \"etag\": \"C=42@U=\" + generateGuid(),\n   \"createdDateExtended\": 475847804,\n   \"priority\": priorityMap[msg.ldm.tasklist[0].tasks[0].priority],\n   \"completedDate\": null,\n   \"order\": 475847804,\n   \"title\": msg.ldm.tasklist[0].tasks[0].title,\n   \"description\": msg.ldm.tasklist[0].tasks[0].description,\n   \"dueDate\": null,\n   \"dueDateIsAllDay\": false,\n   \"startDate\": null,\n   \"startDateIsAllDay\": true,\n   \"startDateTz\": null,\n   \"recurrence\": null,\n   \"alarms\": [{\n      \"messageType\":\"message\",\n      \"onDate\": null,\n\t  \"measurement\": null,\n      \"description\": \"Reminder\",\n      \"guid\": generateGuid(),\n      \"isLocationBased\": true,\n      \"proximity\": msg.ldm.tasklist[0].tasks[0].location.proximity,\n      \"structuredLocation\": null\n   }]\n}};\n\n/* if an alarm is set */\nif (undefined !== msg.ldm.tasklist[0].tasks[0].alarm) {\n    var formattedAlarm = formatDate(msg.ldm.tasklist[0].tasks[0].alarm);\n    \n    reminderRequest.payload.Reminders.dueDate = formattedAlarm;\n    reminderRequest.payload.Reminders.startDate = formattedAlarm;\n    reminderRequest.payload.Reminders.alarms[0].onDate = formattedAlarm;\n    reminderRequest.payload.Reminders.startDateIsAllDay = false;\n    reminderRequest.payload.Reminders.startDateTz = msg.ldm.header.usertz;\n}\n\n/* map location only if latitude and longitude is given */\nif (undefined !== msg.ldm.tasklist[0].tasks[0].location.latitude &&\n    undefined !== msg.ldm.tasklist[0].tasks[0].location.longitude) {\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation = {};\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        address = msg.ldm.tasklist[0].tasks[0].location.address;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        latitude = msg.ldm.tasklist[0].tasks[0].location.latitude;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        longitude = msg.ldm.tasklist[0].tasks[0].location.longitude;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        locationName = msg.ldm.tasklist[0].tasks[0].location.name;\n}\n\nreturn reminderRequest;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 880,
        "wires": [
            [
                "517acb22.e1eb8c"
            ]
        ]
    },
    {
        "id": "3d3cca0d.edd3a6",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "iCloud create reminder",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "x": 170,
        "y": 960,
        "wires": [
            [
                "2232f3d5.bb657c"
            ]
        ]
    },
    {
        "id": "ba6057af.a3a548",
        "type": "http response",
        "z": "3aed4340.8f7d1c",
        "name": "reminder response",
        "x": 730,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b6056420.347c3",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "prepare reminder response",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"prepare reminder response\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nif (undefined === msg.ldm.process.errors) {\n    response.payload = {\n        \"success\": true\n    };\n} else {\n    response.payload = msg.ldm.process.errors;\n}\n\n/* determine process duration */\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nresponse.headers = {\n    \"Access-Control-Allow-Origin\": '*'\n};\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "e6a01c86.7d7f6"
            ]
        ]
    },
    {
        "id": "c65d57db.997468",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "name": "logging",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "40eea578.fc945c"
            ]
        ]
    },
    {
        "id": "517acb22.e1eb8c",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "name": "logging",
        "x": 480,
        "y": 880,
        "wires": [
            [
                "3d3cca0d.edd3a6"
            ]
        ]
    },
    {
        "id": "e6a01c86.7d7f6",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "name": "logging",
        "x": 480,
        "y": 1040,
        "wires": [
            [
                "ba6057af.a3a548"
            ]
        ]
    },
    {
        "id": "2232f3d5.bb657c",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 500,
        "y": 960,
        "wires": [
            [
                "b6056420.347c3"
            ],
            [
                "ba6057af.a3a548"
            ]
        ]
    },
    {
        "id": "df9ff692.c43de",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "save input to LDM",
        "func": "var output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.payload = msg.payload;\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/reminders\" },\n        \"title\": 'Error while saving input to LDM',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check input */\nif ((undefined === msg.payload.appleId || msg.payload.appleId.length === 0) ||\n    (undefined === msg.payload.password || msg.payload.password.length === 0)) {\n    /* appleId or password undefined or empty */\n    return [null, null, createErrorMessage('One or more elements are missing ' + \n                        '(appleId, password).')];\n} else if (undefined === msg.payload.reminderList) {\n    /* reminderList missing */\n    return [null, null, createErrorMessage('The element reminderList is missing.')];\n} else if (undefined === msg.payload.title) {\n    /* title missing */\n    return [null, null, createErrorMessage('The element title is missing.')];\n} else if ((undefined === msg.payload.latitude &&\n            undefined === msg.payload.longitude) &&\n           undefined === msg.payload.alarm) {\n    /* alarm missing - mandatory if no geoposition is given */\n    return [null, null, createErrorMessage('One or more elements are missing ' + \n                        '(latitude, longitude, alarm).')];\n} else if ((undefined !== msg.payload.latitude &&\n            undefined !== msg.payload.longitude) &&\n           undefined === msg.payload.proximity) {\n    /* proximity missing - mandatory if a geoposition is given */\n    return [null, null, createErrorMessage('The element proximity is missing.')];\n} else if (undefined === msg.payload.latitude &&\n           undefined !== msg.payload.longitude) {\n    /* latitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage('The element latitude is missing.')];\n} else if (undefined !== msg.payload.latitude &&\n           undefined === msg.payload.longitude) {\n    /* longitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage('The element longitude is missing.')];\n}\n\n/* save input to LDM */\noutput.ldm = {\n    \"process\": {\n        \"trace\": [{\n            \"step\": \"save input to LDM\",\n            \"timestamp\": new Date().getTime()\n        }],\n        \"durationInMs\" : null\n    },\n    \"header\": {\n        \"origin\": \"https://www.icloud.com\",\n        \"userAgent\": \"node-red-icloud/1.4.0 (Node-RED)\",\n        \"appleId\": msg.payload.appleId,\n        \"password\": msg.payload.password,\n        \"list\": msg.payload.reminderList,\n        \"sessionCookie\": null,\n        \"remindersurl\": null,\n        \"languageCode\": null,\n        \"dsid\": null,\n    \t\"usertz\": null\n    },\n    \"tasklist\": [{\n        \"guid\": null,\n        \"title\": msg.payload.reminderList,\n        \"color\": null,\n        \"tasks\": [{\n            \"guid\": null,\n            \"title\": msg.payload.title,\n            \"description\": msg.payload.description,\n            \"priority\": msg.payload.priority,\n            \"done\": null,\n\t        \"alarm\": msg.payload.alarm,\n    \t    \"location\": {\n        \t\t\"name\": msg.payload.locationName,\n        \t\t\"address\": msg.payload.address,\n        \t\t\"latitude\": msg.payload.latitude,\n        \t\t\"longitude\": msg.payload.longitude,\n        \t\t\"proximity\": msg.payload.proximity\n    \t    }\n        }]\n    }]\n};\n\n/* If a geoposition is given but the address is missing, call Nominatim\n   to determine the address */\nif (undefined !== msg.payload.latitude &&\n    undefined !== msg.payload.longitude &&\n    undefined === msg.payload.address) {\n\n    var nominatimRequest = {};\n    nominatimRequest.req = msg.req;\n    nominatimRequest.res = msg.res;\n    nominatimRequest.ldm = output.ldm;\n    \n    nominatimRequest.url = \n        'http://nominatim.openstreetmap.org/reverse?format=json' +\n        '&lat=' + msg.payload.latitude +\n        '&lon=' + msg.payload.longitude;\n\n    nominatimRequest.headers = {\n        \"User-Agent\": output.ldm.header.userAgent\n    }\n\n    /* set values for tracing */\n    var trace = {\n        \"step\": \"call Nominatim\",\n        \"timestamp\": new Date().getTime()\n    }\n    nominatimRequest.ldm.process.trace.push(trace);\n\n    return [null, nominatimRequest, null];\n} else {\n    return [output, null, null];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 170,
        "y": 220,
        "wires": [
            [
                "c65d57db.997468"
            ],
            [
                "59c1e9c5.9d5f9"
            ],
            [
                "2cd08daf.f37f8a"
            ]
        ]
    },
    {
        "id": "88bf6bf9.b978c",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 500,
        "y": 800,
        "wires": [
            [
                "97467c85.971c9"
            ],
            [
                "ba6057af.a3a548"
            ]
        ]
    },
    {
        "id": "3c7d49eb.1fa20e",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "Nominatim",
        "method": "GET",
        "ret": "txt",
        "url": "",
        "x": 490,
        "y": 480,
        "wires": [
            [
                "30091fee.6e11"
            ]
        ]
    },
    {
        "id": "44c3111.0bd98f",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "save Nominatim response to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\nresponse.payload = {};\nresponse.payload.appleId = msg.ldm.header.appleId;\nresponse.payload.password = msg.ldm.header.password;\n\n/* set values for tracing */\nvar trace = {\n    \"step\": \"save Nominatim response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nvar addressLine = '';\n\nif (undefined === msg.payload.error) {\n    if (msg.payload.address.country_code === 'ca' ||\n        msg.payload.address.country_code === 'gb' ||\n        msg.payload.address.country_code === 'us') {\n        addressLine =\n            (msg.payload.address.house_number || '') + ' ' +\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                '') + ' ' +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                '') + ' ' +\n            (msg.payload.address.postcode || '');\n    } else {\n        addressLine =\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                '') + ' ' +\n            (msg.payload.address.house_number || '') + ' ' +\n            (msg.payload.address.postcode || '') + ' ' +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                '');\n    }\n}\n\nresponse.ldm.tasklist[0].tasks[0].location.address = addressLine;\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 640,
        "wires": [
            [
                "983a9f26.b1cff"
            ]
        ]
    },
    {
        "id": "bef9a7b0.b2cc",
        "type": "comment",
        "z": "3aed4340.8f7d1c",
        "name": "call Nominatim",
        "info": "-calls Nominatim to determine the address for a given geoposition",
        "x": 500,
        "y": 400,
        "wires": []
    },
    {
        "id": "30091fee.6e11",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 500,
        "y": 560,
        "wires": [
            [
                "44c3111.0bd98f"
            ],
            [
                "ba6057af.a3a548"
            ]
        ]
    },
    {
        "id": "59c1e9c5.9d5f9",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "name": "logging",
        "x": 480,
        "y": 320,
        "wires": [
            [
                "3c7d49eb.1fa20e"
            ]
        ]
    },
    {
        "id": "c75f8fb.606ccf",
        "type": "comment",
        "z": "3aed4340.8f7d1c",
        "name": "version 1.4",
        "info": "version 1.0: initial version\nversion 1.1: added mapping for time zone names\n             added exception handling\nversion 1.2: bug fix for multiple incoming messages within seconds\n             added control mechanism using a semaphore\nversion 1.3: added logical data model (LDM) to flow, removed control\n             mechanism using a semaphore\nversion 1.4: added check for appleId and password in 'save input to LDM'",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "db170b93.be5338",
        "type": "catch",
        "z": "3aed4340.8f7d1c",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 1120,
        "wires": [
            [
                "410eecb9.7de83c"
            ]
        ]
    },
    {
        "id": "410eecb9.7de83c",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "set exception",
        "func": "var response = {};\nresponse.req = null; //???\nresponse.res = null; //???\nresponse.ldm = null; //???\nresponse.payload = {};\nresponse.payload.errors = [];\n\nvar error = {\n    \"status\": 500,\n    \"source\": \"set exception\",\n    \"title\": msg.error.message,\n    \"detail\": msg.error.message\n};\n\nresponse.payload.errors.push(error);\n\nresponse.statusCode = 500;\n\n//node.error(msg.error.source.name);\n//node.error(msg.error.message);\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "72b13ce3.a0951c"
            ]
        ]
    },
    {
        "id": "40eea578.fc945c",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "call session cache",
        "method": "POST",
        "ret": "txt",
        "url": "http://127.0.0.1:1880/icloud/login",
        "tls": "",
        "x": 150,
        "y": 800,
        "wires": [
            [
                "88bf6bf9.b978c"
            ]
        ]
    },
    {
        "id": "983a9f26.b1cff",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "40eea578.fc945c"
            ]
        ]
    },
    {
        "id": "72b13ce3.a0951c",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 480,
        "y": 1200,
        "wires": [
            [
                "ba6057af.a3a548"
            ]
        ]
    },
    {
        "id": "2cd08daf.f37f8a",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 480,
        "y": 233,
        "wires": [
            [
                "ba6057af.a3a548"
            ]
        ]
    }
]