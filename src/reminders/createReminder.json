[
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/user/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (msg.ldm &&\n    msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "4da1c51b.eea26c",
        "type": "catch",
        "z": "747253ec.210a54",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "ba779ebf.906ad"
            ]
        ]
    },
    {
        "id": "ba779ebf.906ad",
        "type": "debug",
        "z": "747253ec.210a54",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/user/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (msg.ldm &&\n    msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "4da1c51b.eea26c",
        "type": "catch",
        "z": "747253ec.210a54",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "ba779ebf.906ad"
            ]
        ]
    },
    {
        "id": "ba779ebf.906ad",
        "type": "debug",
        "z": "747253ec.210a54",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "fd4d19b8.ff0d28",
        "type": "subflow",
        "name": "error handling",
        "info": "",
        "in": [
            {
                "x": 64,
                "y": 61,
                "wires": [
                    {
                        "id": "595e324b.072574"
                    },
                    {
                        "id": "9bacadc0.9de588"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 60,
                "wires": [
                    {
                        "id": "595e324b.072574",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "595e324b.072574",
        "type": "function",
        "z": "fd4d19b8.ff0d28",
        "name": "check",
        "func": "/* error codes */\nvar errorCodes = {\n    '7' : {'title': 'Invalid credentials', 'detail': 'Invalid Apple ID'},\n    '1' : {'title': 'Invalid credentials',  'detail': 'Invalid password'},\n    'Error: getaddrinfo EAI_AGAIN p42-remindersws.icloud.com:443': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'},\n    'Error: getaddrinfo EAI_AGAIN setup.icloud.com:443': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'}\n};\n\n/* function to create error messages */\nfunction createErrorMessage(status, source, title, detail) {\n    var response = {};\n    response.statusCode = status;\n    response.req = msg.req;\n    response.res = msg.res;\n    response.ldm = msg.ldm;\n\n    response.ldm.process.finished = true;\n\n    var error = {\n        \"status\": status,\n        \"source\": { \"pointer\": source },\n        \"title\": errorCodes[detail] ? errorCodes[detail].title : title,\n        \"detail\": errorCodes[detail] ? errorCodes[detail].detail : detail\n    };\n\n    var errors = [];\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\nif (msg.statusCode === 200) {\n    /* HTTP status code 200 OK */\n    \n    /* recreate message from input */\n    var responseOk = {};\n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    responseOk.headers = msg.headers;\n    responseOk.payload = msg.payload;\n    responseOk.ldm = msg.ldm;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== '') {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        responseOk.ldm = msg.ldm;\n        \n        return[responseOk, null, null];\n    }\n} else if(msg.statusCode &&\n          Number.isInteger(msg.statusCode) &&\n          msg.statusCode !== 200) {\n    /* HTTP status codes */\n\n    /* \n     * elements:\n     *\n     * msg.payload, e.g. \"{\"error\":7}\"\n     * msg.statusCode, e.g. 403\n     * msg.responseUrl, e.g. \"https://setup.icloud.com/setup/ws/1/login\"\n     */\n     if(msg.payload.errors) {\n        /* in case an errors object exists ... */ \n        return[null, msg];\n     } else {\n         var errorResponse = createErrorMessage(\n                                msg.statusCode,\n                                msg.responseUrl,\n                                msg.payload,\n                                msg.payload.error);\n\n         return[null, errorResponse, null];\n     }\n} else if(msg.error) {\n    /* error object - mostly from catch node */\n\n    /* \n     * elements:\n     *\n     * msg.error.message, e.g. \"ReferenceError: a is not defined (line 4, col 4)\"\n     * msg.error.source.id, e.g. \"60c342f9.7acd6c\"\n     * msg.error.source.type, e.g. \"function\"\n     * msg.error.source.name, e.g. \"set message\"\n     * msg.error.source.count, e.g. 1\n     */\n    var errorResponse = createErrorMessage(\n                            500,\n                            msg.error.source.type + ' ' + msg.error.source.name,\n                            'Error in ' + msg.error.source.type + ' ' + msg.error.source.name,\n                            msg.error.message);\n\n    return[null, errorResponse, null];\n} else if (!msg.statusCode &&\n           isNaN(msg.statusCode)) {\n    /* do nothing */\n} else {\n    /* something unexpected happened */\n    var errorResponse = createErrorMessage(\n                            500,\n                            'Error handling',\n                            'Unexpected',\n                            'An error that has not been handled properly has occurred. ' +\n                            'Analyse the error and provide a proper error handling for this case.');\n\n    return[null, null, errorResponse];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 210,
        "y": 60,
        "wires": [
            [
                "3b615dca.4c3432"
            ],
            [
                "3b615dca.4c3432",
                "2c260c2.371a874"
            ],
            [
                "3b615dca.4c3432"
            ]
        ]
    },
    {
        "id": "3b615dca.4c3432",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "logging",
        "x": 420,
        "y": 220,
        "wires": []
    },
    {
        "id": "db7144bf.863398",
        "type": "catch",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 300,
        "wires": [
            [
                "deb4b529.f59ba8"
            ]
        ]
    },
    {
        "id": "deb4b529.f59ba8",
        "type": "debug",
        "z": "fd4d19b8.ff0d28",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "2c260c2.371a874",
        "type": "http response",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 410,
        "y": 140,
        "wires": []
    },
    {
        "id": "9bacadc0.9de588",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 220,
        "y": 140,
        "wires": []
    },
    {
        "id": "3aed4340.8f7d1c",
        "type": "tab",
        "label": "create reminder"
    },
    {
        "id": "1a97957a.7bd443",
        "type": "http in",
        "z": "3aed4340.8f7d1c",
        "name": "reminder request",
        "url": "/reminders",
        "method": "post",
        "swaggerDoc": "",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "df9ff692.c43de"
            ]
        ]
    },
    {
        "id": "97467c85.971c9",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "prepare reminder request",
        "func": "/* recreate message from input */\nvar reminderRequest = {};\nreminderRequest.req = msg.req;\nreminderRequest.res = msg.res;\nreminderRequest.ldm = msg.ldm;\nreminderRequest.ldm.header = msg.payload.header;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"create reminder\",\n    \"step\": \"prepare reminder request\",\n    \"timestamp\": new Date().getTime()\n};\nreminderRequest.ldm.process.trace.push(trace);\n\n/* map priority values */\nvar priorityMap = {\n  \"1\" : 1,\n  \"2\" : 5,\n  \"3\" : 9,\n  null : null\n};\n\n/* function to generate guid */\nfunction generateGuid() {\n    var guid = '';\n\n    for (var i = 0; i < 32; i++) {\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            guid += \"-\";\n        }\n\n        guid += Math.floor(Math.random()*0xF).toString(0xF);\n    }\n\n    return guid;\n}\n\n/* function to format a date */\nfunction formatDate (dateString) {\n    var dateArray = [\n        parseInt(dateString.substring(0, 10).replace(/-/g, '')),\n        parseInt(dateString.substring(0, 4)),\n        parseInt(dateString.substring(5, 7)),\n        parseInt(dateString.substring(8, 10)),\n        parseInt(dateString.substring(11, 13)),\n        parseInt(dateString.substring(14, 16)),\n        0];\n    \n    return dateArray;\n}\n\n/* gets guid of list by given name */\nvar lists = msg.payload.tasklist;\nfor (var k in lists) {\n    if (lists[k].title === reminderRequest.ldm.tasklist[0].title) {\n        reminderRequest.ldm.tasklist[0].guid = lists[k].guid;\n        break;\n    }\n    \n    /* If the list the reminder should be put on to does not\n       exist, the reminder is put on one of the existing lists. */\n}\n\n/* create URL */\nvar url = msg.ldm.header.remindersurl +\n          '/rd/reminders/' +\n          msg.ldm.tasklist[0].guid +\n          '?' +\n          'usertz='+ msg.ldm.header.usertz +\n          '&lang=' + msg.ldm.header.languageCode +\n          '&dsid=' + msg.ldm.header.dsid;\n\n/* set URL */\nreminderRequest.url = url;\n\n/* HTTP header */\nreminderRequest.headers = {\n    \"origin\": msg.ldm.header.origin,\n    \"cookie\": msg.ldm.header.sessionCookie\n};\n\n/* payload */\nreminderRequest.payload = {\"Reminders\": {\n   \"guid\": generateGuid(),\n   \"pGuid\": reminderRequest.ldm.tasklist[0].guid,\n   \"etag\": \"C=42@U=\" + generateGuid(),\n   \"createdDateExtended\": 475847804,\n   \"priority\": priorityMap[msg.ldm.tasklist[0].tasks[0].priority],\n   \"completedDate\": null,\n   \"order\": 475847804,\n   \"title\": msg.ldm.tasklist[0].tasks[0].title,\n   \"description\": msg.ldm.tasklist[0].tasks[0].description,\n   \"dueDate\": null,\n   \"dueDateIsAllDay\": false,\n   \"startDate\": null,\n   \"startDateIsAllDay\": true,\n   \"startDateTz\": null,\n   \"recurrence\": null,\n   \"alarms\": [{\n      \"messageType\":\"message\",\n      \"onDate\": null,\n\t  \"measurement\": null,\n      \"description\": \"Reminder\",\n      \"guid\": generateGuid(),\n      \"isLocationBased\": true,\n      \"proximity\": msg.ldm.tasklist[0].tasks[0].location.proximity,\n      \"structuredLocation\": null\n   }]\n}};\n\n/* if an alarm is set */\nif (msg.ldm.tasklist[0].tasks[0].alarm) {\n    var formattedAlarm = formatDate(msg.ldm.tasklist[0].tasks[0].alarm);\n    \n    reminderRequest.payload.Reminders.dueDate = formattedAlarm;\n    reminderRequest.payload.Reminders.startDate = formattedAlarm;\n    reminderRequest.payload.Reminders.alarms[0].onDate = formattedAlarm;\n    reminderRequest.payload.Reminders.startDateIsAllDay = false;\n    reminderRequest.payload.Reminders.startDateTz = msg.ldm.header.usertz;\n}\n\n/* map location only if latitude and longitude is given */\nif (msg.ldm.tasklist[0].tasks[0].location.latitude &&\n    msg.ldm.tasklist[0].tasks[0].location.longitude) {\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation = {};\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        address = msg.ldm.tasklist[0].tasks[0].location.address;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        latitude = msg.ldm.tasklist[0].tasks[0].location.latitude;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        longitude = msg.ldm.tasklist[0].tasks[0].location.longitude;\n    reminderRequest.payload.Reminders.alarms[0].structuredLocation.\n        locationName = msg.ldm.tasklist[0].tasks[0].location.name;\n}\n\nreturn reminderRequest;",
        "outputs": 1,
        "noerr": 0,
        "x": 1510,
        "y": 140,
        "wires": [
            [
                "3d3cca0d.edd3a6",
                "29690ad9.c6fb0e"
            ]
        ]
    },
    {
        "id": "3d3cca0d.edd3a6",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "iCloud create reminder",
        "method": "POST",
        "ret": "bin",
        "url": "",
        "tls": "",
        "x": 1810,
        "y": 140,
        "wires": [
            [
                "2232f3d5.bb657c"
            ]
        ]
    },
    {
        "id": "ba6057af.a3a548",
        "type": "http response",
        "z": "3aed4340.8f7d1c",
        "name": "reminder response",
        "x": 2650,
        "y": 140,
        "wires": []
    },
    {
        "id": "b6056420.347c3",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "prepare reminder response",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"create reminder\",\n    \"step\": \"prepare reminder response\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nif (msg.ldm.process.errors &&\n    msg.ldm.process.errors.length > 0) {\n    response.payload = msg.ldm.process.errors;\n} else {\n    response.payload = {\n        \"success\": true\n    };\n}\n\n/* determine process duration */\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nresponse.headers = {\n    \"Access-Control-Allow-Origin\": '*'\n};\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 2360,
        "y": 140,
        "wires": [
            [
                "ba6057af.a3a548",
                "d2999e18.6b121"
            ]
        ]
    },
    {
        "id": "2232f3d5.bb657c",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 2080,
        "y": 140,
        "wires": [
            [
                "b6056420.347c3"
            ]
        ]
    },
    {
        "id": "df9ff692.c43de",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "save input to LDM",
        "func": "var output = {};\noutput.req = msg.req;\noutput.res = msg.res;\noutput.payload = msg.payload;\n\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/reminders\" },\n        \"title\": 'Error while saving input to LDM',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* check input */\nif ((!msg.payload.appleId || msg.payload.appleId.length === 0) ||\n    (!msg.payload.password || msg.payload.password.length === 0)) {\n    /* appleId or password undefined or empty */\n    return [null, null, createErrorMessage('One or more elements are missing ' + \n                        '(appleId, password).')];\n} else if (!msg.payload.reminderList) {\n    /* reminderList missing */\n    return [null, null, createErrorMessage('The element reminderList is missing.')];\n} else if (!msg.payload.title) {\n    /* title missing */\n    return [null, null, createErrorMessage('The element title is missing.')];\n} else if ((!msg.payload.latitude &&\n            !msg.payload.longitude) &&\n            !msg.payload.alarm) {\n    /* alarm missing - mandatory if no geoposition is given */\n    return [null, null, createErrorMessage('One or more elements are missing ' + \n                        '(latitude, longitude, alarm).')];\n} else if ((msg.payload.latitude &&\n            msg.payload.longitude) &&\n           !msg.payload.proximity) {\n    /* proximity missing - mandatory if a geoposition is given */\n    return [null, null, createErrorMessage('The element proximity is missing.')];\n} else if (!msg.payload.latitude &&\n           msg.payload.longitude) {\n    /* latitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage('The element latitude is missing.')];\n} else if (msg.payload.latitude &&\n           !msg.payload.longitude) {\n    /* longitude - mandatory if no alarm is given */\n    return [null, null, createErrorMessage('The element longitude is missing.')];\n}\n\n/* save input to LDM */\noutput.ldm = {\n    \"process\": {\n        \"trace\": [{\n            \"flow\": \"create reminder\",\n            \"step\": \"save input to LDM\",\n            \"timestamp\": new Date().getTime()\n        }],\n        \"durationInMs\" : null\n    },\n    \"header\": {\n        \"origin\": \"https://www.icloud.com\",\n        \"userAgent\": \"node-red-icloud/1.4.0 (Node-RED)\",\n        \"appleId\": msg.payload.appleId,\n        \"password\": msg.payload.password,\n        \"list\": msg.payload.reminderList,\n        \"sessionCookie\": null,\n        \"remindersurl\": null,\n        \"languageCode\": null,\n        \"dsid\": null,\n    \t\"usertz\": null\n    },\n    \"tasklist\": [{\n        \"guid\": null,\n        \"title\": msg.payload.reminderList,\n        \"color\": null,\n        \"tasks\": [{\n            \"guid\": null,\n            \"title\": msg.payload.title,\n            \"description\": msg.payload.description,\n            \"priority\": msg.payload.priority,\n            \"done\": null,\n\t        \"alarm\": msg.payload.alarm,\n    \t    \"location\": {\n        \t\t\"name\": msg.payload.locationName,\n        \t\t\"address\": msg.payload.address,\n        \t\t\"latitude\": msg.payload.latitude,\n        \t\t\"longitude\": msg.payload.longitude,\n        \t\t\"proximity\": msg.payload.proximity\n    \t    }\n        }]\n    }]\n};\n\n/* If a geoposition is given but the address is missing, call Nominatim\n   to determine the address */\nif (msg.payload.latitude &&\n    msg.payload.longitude &&\n    !msg.payload.address) {\n\n    var nominatimRequest = {};\n    nominatimRequest.req = msg.req;\n    nominatimRequest.res = msg.res;\n    nominatimRequest.ldm = output.ldm;\n    \n    nominatimRequest.url = \n        'http://nominatim.openstreetmap.org/reverse?format=json' +\n        '&lat=' + msg.payload.latitude +\n        '&lon=' + msg.payload.longitude;\n\n    nominatimRequest.headers = {\n        \"User-Agent\": output.ldm.header.userAgent\n    }\n\n    /* set values for tracing */\n    var trace = {\n        \"step\": \"call Nominatim\",\n        \"timestamp\": new Date().getTime()\n    }\n    nominatimRequest.ldm.process.trace.push(trace);\n\n    return [null, nominatimRequest, null];\n} else {\n    return [output, null, null];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "40eea578.fc945c"
            ],
            [
                "3c7d49eb.1fa20e",
                "a3443711.8fde98"
            ],
            [
                "2ec66ce8.434074"
            ]
        ]
    },
    {
        "id": "88bf6bf9.b978c",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "97467c85.971c9"
            ]
        ]
    },
    {
        "id": "3c7d49eb.1fa20e",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "Nominatim",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 610,
        "y": 460,
        "wires": [
            [
                "30091fee.6e11"
            ]
        ]
    },
    {
        "id": "44c3111.0bd98f",
        "type": "function",
        "z": "3aed4340.8f7d1c",
        "name": "save Nominatim response to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\nresponse.payload = {};\nresponse.payload.appleId = msg.ldm.header.appleId;\nresponse.payload.password = msg.ldm.header.password;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"create reminder\",\n    \"step\": \"save Nominatim response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nvar addressLine = '';\n\nif (!msg.payload.error) {\n    if (msg.payload.address.country_code === 'ca' ||\n        msg.payload.address.country_code === 'gb' ||\n        msg.payload.address.country_code === 'us') {\n        addressLine =\n            (msg.payload.address.house_number || '') + ' ' +\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                '') + ' ' +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                '') + ' ' +\n            (msg.payload.address.postcode || '');\n    } else {\n        addressLine =\n            (msg.payload.address.road ||\n                msg.payload.address.pedestrian ||\n                '') + ' ' +\n            (msg.payload.address.house_number || '') + ' ' +\n            (msg.payload.address.postcode || '') + ' ' +\n            (msg.payload.address.city ||\n                msg.payload.address.town || \n                msg.payload.address.village ||\n                msg.payload.address.hamlet ||\n                '');\n    }\n}\n\nresponse.ldm.tasklist[0].tasks[0].location.address = addressLine;\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 680,
        "y": 620,
        "wires": [
            [
                "40eea578.fc945c",
                "438d628f.01c0a4"
            ]
        ]
    },
    {
        "id": "bef9a7b0.b2cc",
        "type": "comment",
        "z": "3aed4340.8f7d1c",
        "name": "call Nominatim",
        "info": "-calls Nominatim to determine the address for a given geoposition",
        "x": 620,
        "y": 380,
        "wires": []
    },
    {
        "id": "30091fee.6e11",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "error handling",
        "x": 620,
        "y": 540,
        "wires": [
            [
                "44c3111.0bd98f"
            ]
        ]
    },
    {
        "id": "c75f8fb.606ccf",
        "type": "comment",
        "z": "3aed4340.8f7d1c",
        "name": "version 1.5",
        "info": "version 1.0: initial version\nversion 1.1: added mapping for time zone names\n             added exception handling\nversion 1.2: bug fix for multiple incoming messages within seconds\n             added control mechanism using a semaphore\nversion 1.3: added logical data model (LDM) to flow, removed control\n             mechanism using a semaphore\nversion 1.4: added check for appleId and password in 'save input to LDM'\nversion 1.5: refactoring of error handling",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "db170b93.be5338",
        "type": "catch",
        "z": "3aed4340.8f7d1c",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 220,
        "wires": [
            [
                "93201421.b58eb"
            ]
        ]
    },
    {
        "id": "40eea578.fc945c",
        "type": "http request",
        "z": "3aed4340.8f7d1c",
        "name": "call session cache",
        "method": "POST",
        "ret": "obj",
        "url": "http://127.0.0.1:1880/icloud/login",
        "tls": "",
        "x": 990,
        "y": 140,
        "wires": [
            [
                "88bf6bf9.b978c"
            ]
        ]
    },
    {
        "id": "93201421.b58eb",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "name": "",
        "x": 320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2ec66ce8.434074",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "3aed4340.8f7d1c",
        "x": 620,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "438d628f.01c0a4",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 960,
        "y": 620,
        "wires": []
    },
    {
        "id": "a3443711.8fde98",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "29690ad9.c6fb0e",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 1760,
        "y": 220,
        "wires": []
    },
    {
        "id": "d2999e18.6b121",
        "type": "subflow:747253ec.210a54",
        "z": "3aed4340.8f7d1c",
        "x": 2620,
        "y": 220,
        "wires": []
    }
]