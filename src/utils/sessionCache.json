[
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (!msg.ldm &&\n    !msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "4da1c51b.eea26c",
        "type": "catch",
        "z": "747253ec.210a54",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "ba779ebf.906ad"
            ]
        ]
    },
    {
        "id": "ba779ebf.906ad",
        "type": "debug",
        "z": "747253ec.210a54",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "747253ec.210a54",
        "type": "subflow",
        "name": "logging",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "f2abfe1d.5032a"
                    }
                ]
            }
        ],
        "out": []
    },
    {
        "id": "f2abfe1d.5032a",
        "type": "function",
        "z": "747253ec.210a54",
        "name": "prepare log entry",
        "func": "/* configure logging */\nvar logging = false;\nvar filename = '/home/hendrik/node-red-icloud';\n/* define properties which values should not be logged as plaintext */\nvar list = ['appleId', 'apple_id', 'password'];\n\nif (!logging) {\n    return;\n}\n\n/* function to replace plaintext\n   The list contains elements which should be replaced. */\nfunction replacePlaintext(payload, list) {\n    var k;\n\n    for (k in list) {\n        if (typeof payload !== 'undefined' && payload !== null) {\n            if(payload.hasOwnProperty(list[k])) {\n                payload[list[k]] = 'xxx';\n            }\n        }\n    }\n\n    /* TODO: insert code to replace property values on levels deeper than 1 */\n    \n    return payload;\n}\n\nvar logEntry = '';\n\nif (!msg.ldm &&\n    !msg.ldm.process) {\n    logEntry = new Date().toISOString() +\n                ' ' +\n                JSON.stringify(msg.ldm.process);    \n}\n\n\nvar logMessage = {\n    \"filename\": filename,\n    \"payload\": logEntry\n};\n\nreturn logMessage;",
        "outputs": "1",
        "noerr": 0,
        "x": 250,
        "y": 60,
        "wires": [
            [
                "22800233.236c8e"
            ]
        ]
    },
    {
        "id": "22800233.236c8e",
        "type": "file",
        "z": "747253ec.210a54",
        "name": "write log entry",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "4da1c51b.eea26c",
        "type": "catch",
        "z": "747253ec.210a54",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 140,
        "wires": [
            [
                "ba779ebf.906ad"
            ]
        ]
    },
    {
        "id": "ba779ebf.906ad",
        "type": "debug",
        "z": "747253ec.210a54",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 140,
        "wires": []
    },
    {
        "id": "fd4d19b8.ff0d28",
        "type": "subflow",
        "name": "error handling",
        "info": "",
        "in": [
            {
                "x": 64,
                "y": 61,
                "wires": [
                    {
                        "id": "595e324b.072574"
                    },
                    {
                        "id": "9bacadc0.9de588"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 60,
                "wires": [
                    {
                        "id": "595e324b.072574",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "595e324b.072574",
        "type": "function",
        "z": "fd4d19b8.ff0d28",
        "name": "check",
        "func": "/* error codes */\nvar errorCodes = {\n    '7' : {'title': 'Invalid credentials', 'detail': 'Invalid Apple ID'},\n    '1' : {'title': 'Invalid credentials',  'detail': 'Invalid password'},\n    'Error: getaddrinfo EAI_AGAIN p42-remindersws.icloud.com:443': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'},\n    'Error: getaddrinfo EAI_AGAIN setup.icloud.com:443': \n        {'title': 'Connection error',  'detail': 'Unable to connect to iCloud'}\n};\n\n/* function to create error messages */\nfunction createErrorMessage(status, source, title, detail) {\n    var response = {};\n    response.statusCode = status;\n    response.req = msg.req;\n    response.res = msg.res;\n    response.ldm = msg.ldm;\n\n    response.ldm.process.finished = true;\n\n    var error = {\n        \"status\": status,\n        \"source\": { \"pointer\": source },\n        \"title\": errorCodes[detail] ? errorCodes[detail].title : title,\n        \"detail\": errorCodes[detail] ? errorCodes[detail].detail : detail\n    };\n\n    var errors = [];\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\nif (msg.statusCode === 200) {\n    /* HTTP status code 200 OK */\n    \n    /* recreate message from input */\n    var responseOk = {};\n    responseOk.req = msg.req;\n    responseOk.res = msg.res;\n    responseOk.headers = msg.headers;\n    responseOk.payload = msg.payload;\n    responseOk.ldm = msg.ldm;\n    \n    /* check whether payload is filled */\n    if (responseOk.payload !== '') {\n        return[responseOk, null, null];\n    } else {\n        /* Since a JSON object cannot be created from\n           an empty string, the message is passed on to\n           terminal two. */\n        responseOk.req = msg.req;\n        responseOk.res = msg.res;\n        responseOk.ldm = msg.ldm;\n        \n        return[responseOk, null, null];\n    }\n} else if(msg.statusCode &&\n          Number.isInteger(msg.statusCode) &&\n          msg.statusCode !== 200) {\n    /* HTTP status codes */\n\n    /* \n     * elements:\n     *\n     * msg.payload, e.g. \"{\"error\":7}\"\n     * msg.statusCode, e.g. 403\n     * msg.responseUrl, e.g. \"https://setup.icloud.com/setup/ws/1/login\"\n     */\n     if(msg.payload.errors) {\n        /* in case an errors object exists ... */ \n        return[null, msg];\n     } else {\n         var errorResponse = createErrorMessage(\n                                msg.statusCode,\n                                msg.responseUrl,\n                                msg.payload,\n                                msg.payload.error);\n\n         return[null, errorResponse, null];\n     }\n} else if(msg.error) {\n    /* error object - mostly from catch node */\n\n    /* \n     * elements:\n     *\n     * msg.error.message, e.g. \"ReferenceError: a is not defined (line 4, col 4)\"\n     * msg.error.source.id, e.g. \"60c342f9.7acd6c\"\n     * msg.error.source.type, e.g. \"function\"\n     * msg.error.source.name, e.g. \"set message\"\n     * msg.error.source.count, e.g. 1\n     */\n    var errorResponse = createErrorMessage(\n                            500,\n                            msg.error.source.type + ' ' + msg.error.source.name,\n                            'Error in ' + msg.error.source.type + ' ' + msg.error.source.name,\n                            msg.error.message);\n\n    return[null, errorResponse, null];\n} else if (!msg.statusCode &&\n           isNaN(msg.statusCode)) {\n    /* do nothing */\n} else {\n    /* something unexpected happened */\n    var errorResponse = createErrorMessage(\n                            500,\n                            'Error handling',\n                            'Unexpected',\n                            'An error that has not been handled properly has occurred. ' +\n                            'Analyse the error and provide a proper error handling for this case.');\n\n    return[null, null, errorResponse];\n}",
        "outputs": "3",
        "noerr": 0,
        "x": 210,
        "y": 60,
        "wires": [
            [
                "3b615dca.4c3432"
            ],
            [
                "3b615dca.4c3432",
                "2c260c2.371a874"
            ],
            [
                "3b615dca.4c3432"
            ]
        ]
    },
    {
        "id": "3b615dca.4c3432",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "name": "logging",
        "x": 420,
        "y": 220,
        "wires": []
    },
    {
        "id": "db7144bf.863398",
        "type": "catch",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 300,
        "wires": [
            [
                "deb4b529.f59ba8"
            ]
        ]
    },
    {
        "id": "deb4b529.f59ba8",
        "type": "debug",
        "z": "fd4d19b8.ff0d28",
        "name": "log error",
        "active": true,
        "console": "true",
        "complete": "error",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "2c260c2.371a874",
        "type": "http response",
        "z": "fd4d19b8.ff0d28",
        "name": "",
        "x": 410,
        "y": 140,
        "wires": []
    },
    {
        "id": "9bacadc0.9de588",
        "type": "subflow:747253ec.210a54",
        "z": "fd4d19b8.ff0d28",
        "x": 220,
        "y": 140,
        "wires": []
    },
    {
        "id": "d685ffcb.a30c08",
        "type": "tab",
        "label": "session cache"
    },
    {
        "id": "4288b236.4f428c",
        "type": "http response",
        "z": "d685ffcb.a30c08",
        "name": "login response",
        "x": 2720,
        "y": 140,
        "wires": []
    },
    {
        "id": "b753ccc2.47e12",
        "type": "http in",
        "z": "d685ffcb.a30c08",
        "name": "session cache",
        "url": "/icloud/login",
        "method": "post",
        "swaggerDoc": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "86ef476b.fd1d58"
            ]
        ]
    },
    {
        "id": "86ef476b.fd1d58",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "save input to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\n\n/* check input */\nif ((!msg.payload.appleId || msg.payload.appleId.length === 0) ||\n    (!msg.payload.password || msg.payload.password.length === 0)) {\n    /* appleId or password undefined or not empty */\n    return [null, null, createErrorMessage('One or more elements are missing ' + \n                            '(appleId, password).')];\n}\n\nfunction hash(str) {\nreturn str.split('').reduce((prevHash, currVal) =>\n    ((prevHash << 5) - prevHash) + currVal.charCodeAt(0), 0);\n}\n\nvar hashValue = '' + hash(msg.payload.appleId + msg.payload.password);\n\nvar sessionCache = flow.get('sessionCache');\nvar entry;\n\nif(sessionCache) {\n    for(var k in sessionCache) {\n        if(sessionCache[k].hashValue === hashValue) {\n            entry = sessionCache[k];\n            break;\n        }\n    }\n    \n    /* BUG: if a new list is available, it cannot be retrieved when the cache is used */\n    if(entry) {\n        var result = {};\n        result.payload = {};\n        result.statusCode = 200;\n        result.req = msg.req;\n        result.res = msg.res;\n        result.payload = entry.ldm;\n    \n        return [null, result, null];\n    }\n}\n/* function to create error messages */\nfunction createErrorMessage(message) {\n    var errors = [];\n    var response = {};\n    response.req = msg.req;\n    response.res = msg.res;\n    response.statusCode = 400;\n    \n    var error = {\n        \"status\": 400,\n        \"source\": { \"pointer\": \"/icloud/login\" },\n        \"title\": 'Error while saving input to LDM',\n        \"detail\": message\n    };\n\n    errors.push(error);\n    \n    response.payload = {\n        \"errors\": errors\n    };\n\n    return response;\n}\n\n/* save input to LDM */\nresponse.ldm = {\n    \"process\": {\n        \"trace\": [{\n            \"flow\": \"session cache\",\n            \"step\": \"save input to LDM\",\n            \"timestamp\": new Date().getTime()\n        }],\n        \"durationInMs\": null\n    },\n    \"header\": {\n        \"origin\": \"https://www.icloud.com\",\n        \"userAgent\": \"node-red-icloud/1.4.0 (Node-RED)\",\n        \"appleId\": msg.payload.appleId,\n        \"password\": msg.payload.password,\n        \"list\": null,\n        \"sessionCookie\": null,\n        \"remindersurl\": null,\n        \"languageCode\": null,\n        \"dsid\": null,\n    \t\"usertz\": null\n    },\n    \"tasklist\": []\n};\n\nreturn [response, null, null];",
        "outputs": "3",
        "noerr": 0,
        "x": 350,
        "y": 140,
        "wires": [
            [
                "7686f974.bc9b3",
                "a8b58146.0c311"
            ],
            [
                "4c598c81.5ba75c",
                "a8b58146.0c311"
            ],
            [
                "a1c4db21.26d4a8"
            ]
        ]
    },
    {
        "id": "7686f974.bc9b3",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "prepare login request",
        "func": "/* recreate message from input */\nvar loginRequest = {};\nloginRequest.req = msg.req;\nloginRequest.res = msg.res;\nloginRequest.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"session cache\",\n    \"step\": \"prepare login request\",\n    \"timestamp\": new Date().getTime()\n};\nloginRequest.ldm.process.trace.push(trace);\n\n/* HTTP header */\nloginRequest.headers = {\n    \"origin\": msg.ldm.header.origin\n};\n\n/* payload */\nloginRequest.payload = {\n    \"apple_id\": msg.ldm.header.appleId,\n    \"password\": msg.ldm.header.password,\n    \"extended_login\": false\n};\n\nreturn loginRequest;",
        "outputs": 1,
        "noerr": 0,
        "x": 620,
        "y": 140,
        "wires": [
            [
                "fc0fea40.7178e8",
                "2f77c883.dcf118"
            ]
        ]
    },
    {
        "id": "fc0fea40.7178e8",
        "type": "http request",
        "z": "d685ffcb.a30c08",
        "name": "iCloud login",
        "method": "POST",
        "ret": "obj",
        "url": "https://setup.icloud.com/setup/ws/1/login",
        "tls": "",
        "x": 870,
        "y": 140,
        "wires": [
            [
                "7f0b8674.72a288"
            ]
        ]
    },
    {
        "id": "4ed4df79.8c3ee8",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "save login response to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"session cache\",\n    \"step\": \"save login response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\n/* get all cookies from the login response */\nvar cookies = msg.headers['set-cookie'];\nvar sessionCookie = '';\n\nfor (var k in cookies) {\n    sessionCookie += cookies[k].substring(0, cookies[k].indexOf(';') + 1);\n}\n\nresponse.ldm.header.sessionCookie =\n    sessionCookie.substring(0, sessionCookie.lastIndexOf(';'));\n/* get all cookies from login response - end */\n\n/* store property values of the login response */\nresponse.ldm.header.remindersurl = msg.payload.webservices.reminders.url;\nresponse.ldm.header.languageCode = msg.payload.dsInfo.languageCode;\nresponse.ldm.header.dsid = msg.payload.dsInfo.dsid;\n\n/* list of country codes, GMT offsets and time zone names */\nvar codes = {\n    \"AD_GMT+1\" : \"Europe/Andorra\",\n    \"AE_GMT+4\" : \"Asia/Dubai\",\n    \"AF_GMT+4.5\" : \"Asia/Kabul\",\n    \"AG_GMT-4\" : \"America/Antigua\",\n    \"AI_GMT-4\" : \"America/Anguilla\",\n    \"AL_GMT+1\" : \"Europe/Tirane\",\n    \"AM_GMT+4\" : \"Asia/Yerevan\",\n    \"AO_GMT+1\" : \"Africa/Luanda\",\n    \"AQ_GMT\" : \"Antarctica/Troll\",\n    \"AQ_GMT+10\" : \"Antarctica/DumontDUrville\",\n    \"AQ_GMT+12\" : \"Antarctica/McMurdo\",\n    \"AQ_GMT+3\" : \"Antarctica/Syowa\",\n    \"AQ_GMT+5\" : \"Antarctica/Mawson\",\n    \"AQ_GMT+6\" : \"Antarctica/Vostok\",\n    \"AQ_GMT+7\" : \"Antarctica/Davis\",\n    \"AQ_GMT+8\" : \"Antarctica/Casey\",\n    \"AQ_GMT-3\" : \"Antarctica/Palmer\",\n    \"AR_GMT-3\" : \"America/Argentina/Buenos_Aires\",\n    \"AS_GMT-11\" : \"Pacific/Pago_Pago\",\n    \"AT_GMT+1\" : \"Europe/Vienna\",\n    \"AU_GMT+10\" : \"Australia/Brisbane\",\n    \"AU_GMT+10.5\" : \"Australia/Lord_Howe\",\n    \"AU_GMT+11\" : \"Antarctica/Macquarie\",\n    \"AU_GMT+8\" : \"Australia/Perth\",\n    \"AU_GMT+8.75\" : \"Australia/Eucla\",\n    \"AU_GMT+9.5\" : \"Australia/Adelaide\",\n    \"AW_GMT-4\" : \"America/Aruba\",\n    \"AX_GMT+2\" : \"Europe/Mariehamn\",\n    \"AZ_GMT+4\" : \"Asia/Baku\",\n    \"BA_GMT+1\" : \"Europe/Sarajevo\",\n    \"BB_GMT-4\" : \"America/Barbados\",\n    \"BD_GMT+6\" : \"Asia/Dhaka\",\n    \"BE_GMT+1\" : \"Europe/Brussels\",\n    \"BF_GMT\" : \"Africa/Ouagadougou\",\n    \"BG_GMT+2\" : \"Europe/Sofia\",\n    \"BH_GMT+3\" : \"Asia/Bahrain\",\n    \"BI_GMT+2\" : \"Africa/Bujumbura\",\n    \"BJ_GMT+1\" : \"Africa/Porto-Novo\",\n    \"BL_GMT-4\" : \"America/St_Barthelemy\",\n    \"BM_GMT-4\" : \"Atlantic/Bermuda\",\n    \"BN_GMT+8\" : \"Asia/Brunei\",\n    \"BO_GMT-4\" : \"America/La_Paz\",\n    \"BQ_GMT-4\" : \"America/Kralendijk\",\n    \"BR_GMT-2\" : \"America/Noronha\",\n    \"BR_GMT-3\" : \"America/Araguaina\",\n    \"BR_GMT-4\" : \"America/Boa_Vista\",\n    \"BR_GMT-5\" : \"America/Eirunepe\",\n    \"BT_GMT+6\" : \"Asia/Thimphu\",\n    \"BW_GMT+2\" : \"Africa/Gaborone\",\n    \"BY_GMT+3\" : \"Europe/Minsk\",\n    \"BZ_GMT-6\" : \"America/Belize\",\n    \"CA_GMT-3.5\" : \"America/St_Johns\",\n    \"CA_GMT-4\" : \"America/Blanc-Sablon\",\n    \"CA_GMT-5\" : \"America/Atikokan\",\n    \"CA_GMT-6\" : \"America/Rainy_River\",\n    \"CA_GMT-7\" : \"America/Cambridge_Bay\",\n    \"CA_GMT-8\" : \"America/Dawson\",\n    \"CC_GMT+6.5\" : \"Indian/Cocos\",\n    \"CD_GMT+1\" : \"Africa/Kinshasa\",\n    \"CD_GMT+2\" : \"Africa/Lubumbashi\",\n    \"CF_GMT+1\" : \"Africa/Bangui\",\n    \"CG_GMT+1\" : \"Africa/Brazzaville\",\n    \"CH_GMT+1\" : \"Europe/Zurich\",\n    \"CI_GMT\" : \"Africa/Abidjan\",\n    \"CK_GMT-10\" : \"Pacific/Rarotonga\",\n    \"CL_GMT-3\" : \"America/Santiago\",\n    \"CL_GMT-5\" : \"Pacific/Easter\",\n    \"CM_GMT+1\" : \"Africa/Douala\",\n    \"CN_GMT+6\" : \"Asia/Urumqi\",\n    \"CN_GMT+8\" : \"Asia/Shanghai\",\n    \"CO_GMT-5\" : \"America/Bogota\",\n    \"CR_GMT-6\" : \"America/Costa_Rica\",\n    \"CU_GMT-5\" : \"America/Havana\",\n    \"CV_GMT-1\" : \"Atlantic/Cape_Verde\",\n    \"CW_GMT-4\" : \"America/Curacao\",\n    \"CX_GMT+7\" : \"Indian/Christmas\",\n    \"CY_GMT+2\" : \"Asia/Nicosia\",\n    \"CZ_GMT+1\" : \"Europe/Prague\",\n    \"DE_GMT+1\" : \"Europe/Berlin\",\n    \"DJ_GMT+3\" : \"Africa/Djibouti\",\n    \"DK_GMT+1\" : \"Europe/Copenhagen\",\n    \"DM_GMT-4\" : \"America/Dominica\",\n    \"DO_GMT-4\" : \"America/Santo_Domingo\",\n    \"DZ_GMT+1\" : \"Africa/Algiers\",\n    \"EC_GMT-5\" : \"America/Guayaquil\",\n    \"EC_GMT-6\" : \"Pacific/Galapagos\",\n    \"EE_GMT+2\" : \"Europe/Tallinn\",\n    \"EG_GMT+2\" : \"Africa/Cairo\",\n    \"EH_GMT\" : \"Africa/El_Aaiun\",\n    \"ER_GMT+3\" : \"Africa/Asmara\",\n    \"ES_GMT\" : \"Atlantic/Canary\",\n    \"ES_GMT+1\" : \"Europe/Madrid\",\n    \"ET_GMT+3\" : \"Africa/Addis_Ababa\",\n    \"FI_GMT+2\" : \"Europe/Helsinki\",\n    \"FJ_GMT+12\" : \"Pacific/Fiji\",\n    \"FK_GMT-3\" : \"Atlantic/Stanley\",\n    \"FM_GMT+10\" : \"Pacific/Chuuk\",\n    \"FM_GMT+11\" : \"Pacific/Kosrae\",\n    \"FO_GMT\" : \"Atlantic/Faroe\",\n    \"FR_GMT+1\" : \"Europe/Paris\",\n    \"GA_GMT+1\" : \"Africa/Libreville\",\n    \"GB_GMT\" : \"Europe/London\",\n    \"GD_GMT-4\" : \"America/Grenada\",\n    \"GE_GMT+4\" : \"Asia/Tbilisi\",\n    \"GF_GMT-3\" : \"America/Cayenne\",\n    \"GG_GMT\" : \"Europe/Guernsey\",\n    \"GH_GMT\" : \"Africa/Accra\",\n    \"GI_GMT+1\" : \"Europe/Gibraltar\",\n    \"GL_GMT\" : \"America/Danmarkshavn\",\n    \"GL_GMT-1\" : \"America/Scoresbysund\",\n    \"GL_GMT-3\" : \"America/Godthab\",\n    \"GL_GMT-4\" : \"America/Thule\",\n    \"GM_GMT\" : \"Africa/Banjul\",\n    \"GN_GMT\" : \"Africa/Conakry\",\n    \"GP_GMT-4\" : \"America/Guadeloupe\",\n    \"GQ_GMT+1\" : \"Africa/Malabo\",\n    \"GR_GMT+2\" : \"Europe/Athens\",\n    \"GS_GMT-2\" : \"Atlantic/South_Georgia\",\n    \"GT_GMT-6\" : \"America/Guatemala\",\n    \"GU_GMT+10\" : \"Pacific/Guam\",\n    \"GW_GMT\" : \"Africa/Bissau\",\n    \"GY_GMT-4\" : \"America/Guyana\",\n    \"HK_GMT+8\" : \"Asia/Hong_Kong\",\n    \"HN_GMT-6\" : \"America/Tegucigalpa\",\n    \"HR_GMT+1\" : \"Europe/Zagreb\",\n    \"HT_GMT-5\" : \"America/Port-au-Prince\",\n    \"HU_GMT+1\" : \"Europe/Budapest\",\n    \"ID_GMT+7\" : \"Asia/Jakarta\",\n    \"ID_GMT+8\" : \"Asia/Makassar\",\n    \"ID_GMT+9\" : \"Asia/Jayapura\",\n    \"IE_GMT\" : \"Europe/Dublin\",\n    \"IL_GMT+2\" : \"Asia/Jerusalem\",\n    \"IM_GMT\" : \"Europe/Isle_of_Man\",\n    \"IN_GMT+5.5\" : \"Asia/Kolkata\",\n    \"IO_GMT+6\" : \"Indian/Chagos\",\n    \"IQ_GMT+3\" : \"Asia/Baghdad\",\n    \"IR_GMT+3.5\" : \"Asia/Tehran\",\n    \"IS_GMT\" : \"Atlantic/Reykjavik\",\n    \"IT_GMT+1\" : \"Europe/Rome\",\n    \"JE_GMT\" : \"Europe/Jersey\",\n    \"JM_GMT-5\" : \"America/Jamaica\",\n    \"JO_GMT+2\" : \"Asia/Amman\",\n    \"JP_GMT+9\" : \"Asia/Tokyo\",\n    \"KE_GMT+3\" : \"Africa/Nairobi\",\n    \"KG_GMT+6\" : \"Asia/Bishkek\",\n    \"KH_GMT+7\" : \"Asia/Phnom_Penh\",\n    \"KI_GMT+12\" : \"Pacific/Tarawa\",\n    \"KI_GMT+13\" : \"Pacific/Enderbury\",\n    \"KI_GMT+14\" : \"Pacific/Kiritimati\",\n    \"KM_GMT+3\" : \"Indian/Comoro\",\n    \"KN_GMT-4\" : \"America/St_Kitts\",\n    \"KP_GMT+8.5\" : \"Asia/Pyongyang\",\n    \"KR_GMT+9\" : \"Asia/Seoul\",\n    \"KW_GMT+3\" : \"Asia/Kuwait\",\n    \"KY_GMT-5\" : \"America/Cayman\",\n    \"KZ_GMT+5\" : \"Asia/Aqtau\",\n    \"KZ_GMT+6\" : \"Asia/Almaty\",\n    \"LA_GMT+7\" : \"Asia/Vientiane\",\n    \"LB_GMT+2\" : \"Asia/Beirut\",\n    \"LC_GMT-4\" : \"America/St_Lucia\",\n    \"LI_GMT+1\" : \"Europe/Vaduz\",\n    \"LK_GMT+5.5\" : \"Asia/Colombo\",\n    \"LR_GMT\" : \"Africa/Monrovia\",\n    \"LS_GMT+2\" : \"Africa/Maseru\",\n    \"LT_GMT+2\" : \"Europe/Vilnius\",\n    \"LU_GMT+1\" : \"Europe/Luxembourg\",\n    \"LV_GMT+2\" : \"Europe/Riga\",\n    \"LY_GMT+2\" : \"Africa/Tripoli\",\n    \"MA_GMT\" : \"Africa/Casablanca\",\n    \"MC_GMT+1\" : \"Europe/Monaco\",\n    \"MD_GMT+2\" : \"Europe/Chisinau\",\n    \"ME_GMT+1\" : \"Europe/Podgorica\",\n    \"MF_GMT-4\" : \"America/Marigot\",\n    \"MG_GMT+3\" : \"Indian/Antananarivo\",\n    \"MH_GMT+12\" : \"Pacific/Kwajalein\",\n    \"MK_GMT+1\" : \"Europe/Skopje\",\n    \"ML_GMT\" : \"Africa/Bamako\",\n    \"MM_GMT+6.5\" : \"Asia/Rangoon\",\n    \"MN_GMT+7\" : \"Asia/Hovd\",\n    \"MN_GMT+8\" : \"Asia/Choibalsan\",\n    \"MO_GMT+8\" : \"Asia/Macau\",\n    \"MP_GMT+10\" : \"Pacific/Saipan\",\n    \"MQ_GMT-4\" : \"America/Martinique\",\n    \"MR_GMT\" : \"Africa/Nouakchott\",\n    \"MS_GMT-4\" : \"America/Montserrat\",\n    \"MT_GMT+1\" : \"Europe/Malta\",\n    \"MU_GMT+4\" : \"Indian/Mauritius\",\n    \"MV_GMT+5\" : \"Indian/Maldives\",\n    \"MW_GMT+2\" : \"Africa/Blantyre\",\n    \"MX_GMT-5\" : \"America/Cancun\",\n    \"MX_GMT-6\" : \"America/Bahia_Banderas\",\n    \"MX_GMT-7\" : \"America/Chihuahua\",\n    \"MX_GMT-8\" : \"America/Santa_Isabel\",\n    \"MY_GMT+8\" : \"Asia/Kuala_Lumpur\",\n    \"MZ_GMT+2\" : \"Africa/Maputo\",\n    \"NA_GMT+1\" : \"Africa/Windhoek\",\n    \"NC_GMT+11\" : \"Pacific/Noumea\",\n    \"NE_GMT+1\" : \"Africa/Niamey\",\n    \"NF_GMT+11\" : \"Pacific/Norfolk\",\n    \"NG_GMT+1\" : \"Africa/Lagos\",\n    \"NI_GMT-6\" : \"America/Managua\",\n    \"NL_GMT+1\" : \"Europe/Amsterdam\",\n    \"NO_GMT+1\" : \"Europe/Oslo\",\n    \"NP_GMT+5.75\" : \"Asia/Kathmandu\",\n    \"NR_GMT+12\" : \"Pacific/Nauru\",\n    \"NU_GMT-11\" : \"Pacific/Niue\",\n    \"NZ_GMT+12\" : \"Pacific/Auckland\",\n    \"NZ_GMT+12.75\" : \"Pacific/Chatham\",\n    \"OM_GMT+4\" : \"Asia/Muscat\",\n    \"PA_GMT-5\" : \"America/Panama\",\n    \"PE_GMT-5\" : \"America/Lima\",\n    \"PF_GMT-10\" : \"Pacific/Tahiti\",\n    \"PF_GMT-9\" : \"Pacific/Gambier\",\n    \"PF_GMT-9.5\" : \"Pacific/Marquesas\",\n    \"PG_GMT+10\" : \"Pacific/Port_Moresby\",\n    \"PG_GMT+11\" : \"Pacific/Bougainville\",\n    \"PH_GMT+8\" : \"Asia/Manila\",\n    \"PK_GMT+5\" : \"Asia/Karachi\",\n    \"PL_GMT+1\" : \"Europe/Warsaw\",\n    \"PM_GMT-3\" : \"America/Miquelon\",\n    \"PN_GMT-8\" : \"Pacific/Pitcairn\",\n    \"PR_GMT-4\" : \"America/Puerto_Rico\",\n    \"PS_GMT+2\" : \"Asia/Hebron\",\n    \"PT_GMT\" : \"Europe/Lisbon\",\n    \"PT_GMT-1\" : \"Atlantic/Azores\",\n    \"PW_GMT+9\" : \"Pacific/Palau\",\n    \"PY_GMT-4\" : \"America/Asuncion\",\n    \"QA_GMT+3\" : \"Asia/Qatar\",\n    \"RE_GMT+4\" : \"Indian/Reunion\",\n    \"RO_GMT+2\" : \"Europe/Bucharest\",\n    \"RS_GMT+1\" : \"Europe/Belgrade\",\n    \"RU_GMT+10\" : \"Asia/Magadan\",\n    \"RU_GMT+11\" : \"Asia/Srednekolymsk\",\n    \"RU_GMT+12\" : \"Asia/Anadyr\",\n    \"RU_GMT+2\" : \"Europe/Kaliningrad\",\n    \"RU_GMT+3\" : \"Europe/Moscow\",\n    \"RU_GMT+4\" : \"Europe/Samara\",\n    \"RU_GMT+5\" : \"Asia/Yekaterinburg\",\n    \"RU_GMT+6\" : \"Asia/Novosibirsk\",\n    \"RU_GMT+7\" : \"Asia/Krasnoyarsk\",\n    \"RU_GMT+8\" : \"Asia/Chita\",\n    \"RU_GMT+9\" : \"Asia/Khandyga\",\n    \"RW_GMT+2\" : \"Africa/Kigali\",\n    \"SA_GMT+3\" : \"Asia/Riyadh\",\n    \"SB_GMT+11\" : \"Pacific/Guadalcanal\",\n    \"SC_GMT+4\" : \"Indian/Mahe\",\n    \"SD_GMT+3\" : \"Africa/Khartoum\",\n    \"SE_GMT+1\" : \"Europe/Stockholm\",\n    \"SG_GMT+8\" : \"Asia/Singapore\",\n    \"SH_GMT\" : \"Atlantic/St_Helena\",\n    \"SI_GMT+1\" : \"Europe/Ljubljana\",\n    \"SJ_GMT+1\" : \"Arctic/Longyearbyen\",\n    \"SK_GMT+1\" : \"Europe/Bratislava\",\n    \"SL_GMT\" : \"Africa/Freetown\",\n    \"SM_GMT+1\" : \"Europe/San_Marino\",\n    \"SN_GMT\" : \"Africa/Dakar\",\n    \"SO_GMT+3\" : \"Africa/Mogadishu\",\n    \"SR_GMT-3\" : \"America/Paramaribo\",\n    \"SS_GMT+3\" : \"Africa/Juba\",\n    \"ST_GMT\" : \"Africa/Sao_Tome\",\n    \"SV_GMT-6\" : \"America/El_Salvador\",\n    \"SX_GMT-4\" : \"America/Lower_Princes\",\n    \"SY_GMT+2\" : \"Asia/Damascus\",\n    \"SZ_GMT+2\" : \"Africa/Mbabane\",\n    \"TC_GMT-4\" : \"America/Grand_Turk\",\n    \"TD_GMT+1\" : \"Africa/Ndjamena\",\n    \"TF_GMT+5\" : \"Indian/Kerguelen\",\n    \"TG_GMT\" : \"Africa/Lome\",\n    \"TH_GMT+7\" : \"Asia/Bangkok\",\n    \"TJ_GMT+5\" : \"Asia/Dushanbe\",\n    \"TK_GMT+13\" : \"Pacific/Fakaofo\",\n    \"TL_GMT+9\" : \"Asia/Dili\",\n    \"TM_GMT+5\" : \"Asia/Ashgabat\",\n    \"TN_GMT+1\" : \"Africa/Tunis\",\n    \"TO_GMT+13\" : \"Pacific/Tongatapu\",\n    \"TR_GMT+2\" : \"Europe/Istanbul\",\n    \"TT_GMT-4\" : \"America/Port_of_Spain\",\n    \"TV_GMT+12\" : \"Pacific/Funafuti\",\n    \"TW_GMT+8\" : \"Asia/Taipei\",\n    \"TZ_GMT+3\" : \"Africa/Dar_es_Salaam\",\n    \"UA_GMT+2\" : \"Europe/Kiev\",\n    \"UG_GMT+3\" : \"Africa/Kampala\",\n    \"UM_GMT-10\" : \"Pacific/Johnston\",\n    \"UM_GMT+12\" : \"Pacific/Wake\",\n    \"UM_GMT-11\" : \"Pacific/Midway\",\n    \"US_GMT-10\" : \"America/Adak\",\n    \"US_GMT-5\" : \"America/Detroit\",\n    \"US_GMT-6\" : \"America/Chicago\",\n    \"US_GMT-7\" : \"America/Boise\",\n    \"US_GMT-8\" : \"America/Los_Angeles\",\n    \"US_GMT-9\" : \"America/Anchorage\",\n    \"UY_GMT-3\" : \"America/Montevideo\",\n    \"UZ_GMT+5\" : \"Asia/Samarkand\",\n    \"VA_GMT+1\" : \"Europe/Vatican\",\n    \"VC_GMT-4\" : \"America/St_Vincent\",\n    \"VE_GMT-4.5\" : \"America/Caracas\",\n    \"VG_GMT-4\" : \"America/Tortola\",\n    \"VI_GMT-4\" : \"America/St_Thomas\",\n    \"VN_GMT+7\" : \"Asia/Ho_Chi_Minh\",\n    \"VU_GMT+11\" : \"Pacific/Efate\",\n    \"WF_GMT+12\" : \"Pacific/Wallis\",\n    \"WS_GMT+13\" : \"Pacific/Apia\",\n    \"YE_GMT+3\" : \"Asia/Aden\",\n    \"YT_GMT+3\" : \"Indian/Mayotte\",\n    \"ZA_GMT+2\" : \"Africa/Johannesburg\",\n    \"ZM_GMT+2\" : \"Africa/Lusaka\",\n    \"ZW_GMT+2\" : \"Africa/Harare\"\n};\n\n/* determines the time zone name for a given country code and GMT offset */\nfunction timezonename(countryCode, gmt) {\n    /* return as default */\n    var timeZone = 'Europe/London';\n    \n    var key = countryCode + '_' + gmt;\n\n    /* override with exact time zone */\n    if (key in codes) {\n        timeZone = codes[key];\n    }\n    \n    return timeZone;\n}\n\nresponse.ldm.header.usertz = timezonename(msg.payload.requestInfo.country,\n                                          msg.payload.requestInfo.timeZone);\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 1380,
        "y": 140,
        "wires": [
            [
                "e71a68fb.3ab108",
                "fbba908c.5109e8"
            ]
        ]
    },
    {
        "id": "e71a68fb.3ab108",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "prepare startup request",
        "func": "/* recreate message from input */\nvar startupRequest = {};\nstartupRequest.req = msg.req;\nstartupRequest.res = msg.res;\nstartupRequest.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"session cache\",\n    \"step\": \"prepare startup request\",\n    \"timestamp\": new Date().getTime()\n};\nstartupRequest.ldm.process.trace.push(trace);\n\n/* create URL */\nvar url = msg.ldm.header.remindersurl +\n        '/rd/startup' +\n        '?' +\n        'usertz=' + msg.ldm.header.usertz +\n        '&lang=' + msg.ldm.header.languageCode +\n        '&dsid=' + msg.ldm.header.dsid;\n\n/* set URL */\nstartupRequest.url = url;\n\n/* HTTP header */\nstartupRequest.headers = {\n    \"origin\": msg.ldm.header.origin,\n    \"cookie\": msg.ldm.header.sessionCookie\n};\n\nreturn startupRequest;",
        "outputs": 1,
        "noerr": 0,
        "x": 1690,
        "y": 140,
        "wires": [
            [
                "cb93de23.e8aa68",
                "10697c8b.7e806b"
            ]
        ]
    },
    {
        "id": "cb93de23.e8aa68",
        "type": "http request",
        "z": "d685ffcb.a30c08",
        "name": "iCloud startup",
        "method": "GET",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1960,
        "y": 140,
        "wires": [
            [
                "d850595f.65aa38"
            ]
        ]
    },
    {
        "id": "7f0b8674.72a288",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "d685ffcb.a30c08",
        "name": "",
        "x": 1100,
        "y": 140,
        "wires": [
            [
                "4ed4df79.8c3ee8"
            ]
        ]
    },
    {
        "id": "d850595f.65aa38",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "d685ffcb.a30c08",
        "x": 2200,
        "y": 140,
        "wires": [
            [
                "423296cc.6fb948"
            ]
        ]
    },
    {
        "id": "423296cc.6fb948",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "save response to LDM",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\nfunction hash(str) {\nreturn str.split('').reduce((prevHash, currVal) =>\n    ((prevHash << 5) - prevHash) + currVal.charCodeAt(0), 0);\n}\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"session cache\",\n    \"step\": \"save response to LDM\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nfor(var k in msg.payload.Collections) {\n    response.ldm.tasklist.push(\n        {\n            \"guid\": msg.payload.Collections[k].guid,\n            \"title\": msg.payload.Collections[k].title,\n            \"color\": msg.payload.Collections[k].color,\n            \"tasks\": []\n        }\n    );\n}\n\nvar hashValue = '' + hash(msg.ldm.header.appleId + msg.ldm.header.password);\n\nvar sessionCache = [];\n\nsessionCacheEntry = {};\nsessionCacheEntry.hashValue = hashValue;\nsessionCacheEntry.ldm = msg.ldm;\n\nsessionCache.push(sessionCacheEntry);\n\nflow.set('sessionCache', sessionCache);\n\n/* determine process duration */\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nresponse.payload = msg.ldm;\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 2460,
        "y": 140,
        "wires": [
            [
                "4288b236.4f428c",
                "342c394b.e4b96e"
            ]
        ]
    },
    {
        "id": "a1c4db21.26d4a8",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "d685ffcb.a30c08",
        "name": "",
        "x": 600,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "32084d9e.a13f0a",
        "type": "inject",
        "z": "d685ffcb.a30c08",
        "name": "trigger clear session cache",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "900",
        "crontab": "",
        "once": false,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "f8a072dc.a5fef"
            ]
        ]
    },
    {
        "id": "f8a072dc.a5fef",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "prepare logout request",
        "func": "/* TODO: get all cache entries */\nvar sessionCache = flow.get('sessionCache');\n\n/* recreate message from input */\nvar logoutRequests = [];\n\nif(sessionCache) {\n    for(var k in sessionCache) {\n        var entry = sessionCache[k];\n        \n        node.log('clear entry for hash value: ' + entry.hashValue);\n        \n        /* TODO: \n         * 1st do logout for entry\n         * 2nd clear cache, e.g. loginCache = {}; flow.set('loginCache', loginCache);\n         */\n        var logoutRequest = {};\n        logoutRequest.req = msg.req;\n        logoutRequest.res = msg.res;\n        logoutRequest = entry;\n        logoutRequest.payload = {};\n    \n        node.log('logoutRequest.ldm: ' + logoutRequest.ldm.header);\n    \n        /* HTTP header */\n        logoutRequest.headers = {\n            \"origin\": entry.ldm.header.origin,\n            \"cookie\": entry.ldm.header.sessionCookie\n        };\n        \n        logoutRequests.push(logoutRequest);\n        \n        /* set values for tracing */\n        var trace = {\n            \"flow\": \"session cache\",\n            \"step\": \"prepare logout request #\" + k,\n            \"timestamp\": new Date().getTime()\n        };\n        logoutRequest.ldm.process.trace.push(trace);\n    }\n}\n\nreturn logoutRequests;",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "85226dfc.79f6f8",
                "6ab84593.7a767c"
            ]
        ]
    },
    {
        "id": "677cb284.0a1644",
        "type": "comment",
        "z": "d685ffcb.a30c08",
        "name": "configure trigger",
        "info": "configure trigger, e.g. every 30 seconds",
        "x": 120,
        "y": 460,
        "wires": []
    },
    {
        "id": "4edfe554.65e84c",
        "type": "comment",
        "z": "d685ffcb.a30c08",
        "name": "version 1.1",
        "info": "version 1.0: initial version\nversion 1.1: refactoring of error handling",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "d032c10c.f20ce8",
        "type": "comment",
        "z": "d685ffcb.a30c08",
        "name": "logout",
        "info": "triggers the logout in the given interval",
        "x": 290,
        "y": 460,
        "wires": []
    },
    {
        "id": "85226dfc.79f6f8",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 720,
        "y": 620,
        "wires": []
    },
    {
        "id": "9ca40226.318b58",
        "type": "catch",
        "z": "d685ffcb.a30c08",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 220,
        "wires": [
            [
                "9b75e192.6cc668"
            ]
        ]
    },
    {
        "id": "90dd6ae8.6b5c1",
        "type": "function",
        "z": "d685ffcb.a30c08",
        "name": "clear login cache",
        "func": "/* recreate message from input */\nvar response = {};\nresponse.req = msg.req;\nresponse.res = msg.res;\nresponse.ldm = msg.ldm;\n\n/* set values for tracing */\nvar trace = {\n    \"flow\": \"session cache\",\n    \"step\": \"clear login cache\",\n    \"timestamp\": new Date().getTime()\n};\nresponse.ldm.process.trace.push(trace);\n\nvar sessionCache = [];\nflow.set('sessionCache', sessionCache);\n\n/* determine process duration */\nresponse.ldm.process.durationInMs = \n    msg.ldm.process.trace[msg.ldm.process.trace.length - 1].timestamp - msg.ldm.process.trace[0].timestamp;\n\nreturn response;",
        "outputs": 1,
        "noerr": 0,
        "x": 1210,
        "y": 540,
        "wires": [
            [
                "d1efe6cb.5988"
            ]
        ]
    },
    {
        "id": "6ab84593.7a767c",
        "type": "http request",
        "z": "d685ffcb.a30c08",
        "name": "iCloud logout",
        "method": "POST",
        "ret": "obj",
        "url": "https://setup.icloud.com/setup/ws/1/logout",
        "tls": "",
        "x": 730,
        "y": 540,
        "wires": [
            [
                "dd809576.381ef8"
            ]
        ]
    },
    {
        "id": "dd809576.381ef8",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "d685ffcb.a30c08",
        "x": 960,
        "y": 540,
        "wires": [
            [
                "90dd6ae8.6b5c1"
            ]
        ]
    },
    {
        "id": "9b75e192.6cc668",
        "type": "subflow:fd4d19b8.ff0d28",
        "z": "d685ffcb.a30c08",
        "name": "",
        "x": 320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a8b58146.0c311",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "2f77c883.dcf118",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 860,
        "y": 220,
        "wires": []
    },
    {
        "id": "fbba908c.5109e8",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 1640,
        "y": 220,
        "wires": []
    },
    {
        "id": "10697c8b.7e806b",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 1940,
        "y": 220,
        "wires": []
    },
    {
        "id": "d1efe6cb.5988",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 1440,
        "y": 540,
        "wires": []
    },
    {
        "id": "4c598c81.5ba75c",
        "type": "http response",
        "z": "d685ffcb.a30c08",
        "name": "login response",
        "x": 600,
        "y": 300,
        "wires": []
    },
    {
        "id": "342c394b.e4b96e",
        "type": "subflow:747253ec.210a54",
        "z": "d685ffcb.a30c08",
        "x": 2700,
        "y": 220,
        "wires": []
    }
]